{"version":3,"sources":["../node_modules/react-bootstrap/esm/SplitButton.js","pages/uikit/Dropdowns.js","components/PageTitle.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../node_modules/react-bootstrap/esm/Row.js","../node_modules/react-bootstrap/esm/BreadcrumbItem.js","../node_modules/react-bootstrap/esm/Breadcrumb.js","../node_modules/react-bootstrap/node_modules/@restart/hooks/esm/useMergedRefs.js","../node_modules/react-bootstrap/esm/InputGroupContext.js","../node_modules/react-bootstrap/esm/types.js","../node_modules/react-bootstrap/esm/ButtonGroup.js","../node_modules/react-bootstrap/esm/DropdownButton.js"],"names":["propTypes","id","PropTypes","string","toggleLabel","href","target","onClick","func","title","node","isRequired","type","disabled","bool","align","alignPropType","menuRole","renderMenuOnMount","rootCloseEvent","bsPrefix","variant","size","SplitButton","React","ref","children","props","_jsxs","Dropdown","as","ButtonGroup","_jsx","Button","Toggle","split","childBsPrefix","className","Menu","role","renderOnMount","defaultProps","displayName","colors","name","color","SingleButtonDropdown","Card","Body","Row","Col","DropdownButton","Item","DropdownMenuAlignment","ColorVariantButtonDropdown","map","index","Divider","AnimatedButtonDropdown","DropupVariationDropdowns","variations","item","drop","eventKey","DropstartVariationDropdowns","DropendVariationDropdowns","SplitColorVariantButtonDropdown","ButtonDropdownSizes","DropdownType","ActiveItemDropdown","active","DisabledItemDropdown","DropdownWithHeader","Header","DropdownWithText","style","maxWidth","CustomDropdown","htmlFor","placeholder","Dropdowns","PageTitle","breadCrumbItems","label","path","lg","listProps","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","Component","decoratedBsPrefix","useBootstrapPrefix","breakpoints","useBootstrapBreakpoints","sizePrefix","classes","forEach","brkPoint","cols","propValue","infix","push","classNames","BreadcrumbItem","linkAs","LinkComponent","Anchor","linkProps","prefix","undefined","Breadcrumb","assign","toFnRef","value","current","useMergedRefs","refA","refB","useMemo","a","b","mergeRefs","context","alignDirection","oneOf","oneOfType","shape","sm","md","xl","xxl","object","vertical","rest","baseClass","menuVariant","DropdownToggle","DropdownMenu"],"mappings":"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","file":"static/js/106.ccf24dd1.chunk.js","sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from './Button';\nimport ButtonGroup from './ButtonGroup';\nimport Dropdown from './Dropdown';\nimport { alignPropType } from './types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst propTypes = {\n  /**\n   * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.\n   * @type {string}\n   * @required\n   */\n  id: PropTypes.string,\n\n  /**\n   * Accessible label for the toggle; the value of `title` if not specified.\n   */\n  toggleLabel: PropTypes.string,\n\n  /** An `href` passed to the non-toggle Button */\n  href: PropTypes.string,\n\n  /** An anchor `target` passed to the non-toggle Button */\n  target: PropTypes.string,\n\n  /** An `onClick` handler passed to the non-toggle Button */\n  onClick: PropTypes.func,\n\n  /** The content of the non-toggle Button.  */\n  title: PropTypes.node.isRequired,\n\n  /** A `type` passed to the non-toggle Button */\n  type: PropTypes.string,\n\n  /** Disables both Buttons  */\n  disabled: PropTypes.bool,\n\n  /**\n   * Aligns the dropdown menu.\n   *\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\n   *\n   * @type {\"start\"|\"end\"|{ sm: \"start\"|\"end\" }|{ md: \"start\"|\"end\" }|{ lg: \"start\"|\"end\" }|{ xl: \"start\"|\"end\"}|{ xxl: \"start\"|\"end\"} }\n   */\n  align: alignPropType,\n\n  /** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */\n  menuRole: PropTypes.string,\n\n  /** Whether to render the dropdown menu in the DOM before the first time it is shown */\n  renderMenuOnMount: PropTypes.bool,\n\n  /**\n   *  Which event when fired outside the component will cause it to be closed.\n   *\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\n   */\n  rootCloseEvent: PropTypes.string,\n\n  /** @ignore */\n  bsPrefix: PropTypes.string,\n\n  /** @ignore */\n  variant: PropTypes.string,\n\n  /** @ignore */\n  size: PropTypes.string\n};\nconst defaultProps = {\n  toggleLabel: 'Toggle dropdown',\n  type: 'button'\n};\n/**\n * A convenience component for simple or general use split button dropdowns. Renders a\n * `ButtonGroup` containing a `Button` and a `Button` toggle for the `Dropdown`. All `children`\n * are passed directly to the default `Dropdown.Menu`. This component accepts all of [`Dropdown`'s\n * props](#dropdown-props).\n *\n * _All unknown props are passed through to the `Dropdown` component._\n * The Button `variant`, `size` and `bsPrefix` props are passed to the button and toggle,\n * and menu-related props are passed to the `Dropdown.Menu`\n */\n\nconst SplitButton = /*#__PURE__*/React.forwardRef(({\n  id,\n  bsPrefix,\n  size,\n  variant,\n  title,\n  type,\n  toggleLabel,\n  children,\n  onClick,\n  href,\n  target,\n  menuRole,\n  renderMenuOnMount,\n  rootCloseEvent,\n  ...props\n}, ref) => /*#__PURE__*/_jsxs(Dropdown, {\n  ref: ref,\n  ...props,\n  as: ButtonGroup,\n  children: [/*#__PURE__*/_jsx(Button, {\n    size: size,\n    variant: variant,\n    disabled: props.disabled,\n    bsPrefix: bsPrefix,\n    href: href,\n    target: target,\n    onClick: onClick,\n    type: type,\n    children: title\n  }), /*#__PURE__*/_jsx(Dropdown.Toggle, {\n    split: true,\n    id: id,\n    size: size,\n    variant: variant,\n    disabled: props.disabled,\n    childBsPrefix: bsPrefix,\n    children: /*#__PURE__*/_jsx(\"span\", {\n      className: \"visually-hidden\",\n      children: toggleLabel\n    })\n  }), /*#__PURE__*/_jsx(Dropdown.Menu, {\n    role: menuRole,\n    renderOnMount: renderMenuOnMount,\n    rootCloseEvent: rootCloseEvent,\n    children: children\n  })]\n}));\nSplitButton.propTypes = propTypes;\nSplitButton.defaultProps = defaultProps;\nSplitButton.displayName = 'SplitButton';\nexport default SplitButton;","// @flow\nimport React from 'react';\nimport { Row, Col, Card, Dropdown, DropdownButton, SplitButton, ButtonGroup } from 'react-bootstrap';\n\n// components\nimport PageTitle from '../../components/PageTitle';\n\nconst colors = [\n    {\n        name: 'Primary',\n        color: 'primary',\n    },\n    {\n        name: 'Secondary',\n        color: 'secondary',\n    },\n    {\n        name: 'Success',\n        color: 'success',\n    },\n    {\n        name: 'Info',\n        color: 'info',\n    },\n    {\n        name: 'Warning',\n        color: 'warning',\n    },\n    {\n        name: 'Danger',\n        color: 'danger',\n    },\n];\n\nconst SingleButtonDropdown = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Single button dropdowns</h4>\n                <p className=\"text-muted font-14\">\n                    You can use <code>DropdownButton</code> to create a simple dropdown. Also, you can use prop{' '}\n                    <code>as</code> to create custom element typeof dropdown.\n                </p>\n\n                <Row>\n                    <Col className=\"col-auto\">\n                        <DropdownButton variant=\"light\" title=\"Dropdown button\">\n                            <Dropdown.Item href=\"#\">Action</Dropdown.Item>\n                            <Dropdown.Item href=\"#\">Another action</Dropdown.Item>\n                            <Dropdown.Item href=\"#\">Something else here</Dropdown.Item>\n                        </DropdownButton>\n                    </Col>\n                    <Col className=\"col-auto\">\n                        <DropdownButton variant=\"secondary\" as=\"a\" title=\"Dropdown link\">\n                            <Dropdown.Item href=\"#\">Action</Dropdown.Item>\n                            <Dropdown.Item href=\"#\">Another action</Dropdown.Item>\n                            <Dropdown.Item href=\"#\">Something else here</Dropdown.Item>\n                        </DropdownButton>\n                    </Col>\n                </Row>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst DropdownMenuAlignment = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Menu alignment</h4>\n                <p className=\"text-muted font-14\">\n                    Passing <code>right</code> to the <code>menuAligh</code> prop on the\n                    <code> DropdownButton</code> to right align the dropdown menu.\n                </p>\n\n                <DropdownButton variant=\"light\" align=\"end\" title=\"Right-aligned menut\">\n                    <Dropdown.Item href=\"#\">Action</Dropdown.Item>\n                    <Dropdown.Item href=\"#\">Another action</Dropdown.Item>\n                    <Dropdown.Item href=\"#\">Something else here</Dropdown.Item>\n                </DropdownButton>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst ColorVariantButtonDropdown = () => {\n    return (\n        <>\n            <Card>\n                <Card.Body>\n                    <h4 className=\"header-title\">Variant</h4>\n                    <p className=\"text-muted font-14 mb-3\">\n                        The best part is you can do this with any button variant, too:\n                    </p>\n\n                    {colors.map((color, index) => {\n                        return (\n                            <Dropdown key={index} as={ButtonGroup} className=\"me-1\">\n                                <Dropdown.Toggle variant={color.color}>{color.name}</Dropdown.Toggle>\n                                <Dropdown.Menu>\n                                    <Dropdown.Item href=\"#\">Action</Dropdown.Item>\n                                    <Dropdown.Item href=\"#\">Another action</Dropdown.Item>\n                                    <Dropdown.Item href=\"#\">Something else here</Dropdown.Item>\n                                    <Dropdown.Divider />\n                                    <Dropdown.Item href=\"#\">Separated link</Dropdown.Item>\n                                </Dropdown.Menu>\n                            </Dropdown>\n                        );\n                    })}\n                </Card.Body>\n            </Card>\n        </>\n    );\n};\n\nconst AnimatedButtonDropdown = () => {\n    return (\n        <>\n            <Card>\n                <Card.Body>\n                    <h4 className=\"header-title\">Animated Dropdown</h4>\n                    <p className=\"text-muted font-14\">\n                        Add <code>.dropdown-menu-animated</code> to a <code>Dropdown.Menu</code> to have animated\n                        dropdown menu.\n                    </p>\n                    <Dropdown>\n                        <Dropdown.Toggle variant=\"light\">Animated Dropdown</Dropdown.Toggle>\n                        <Dropdown.Menu className=\"dropdown-menu-animated\">\n                            <Dropdown.Item href=\"#\">Action</Dropdown.Item>\n                            <Dropdown.Item href=\"#\">Another action</Dropdown.Item>\n                            <Dropdown.Item href=\"#\">Something else here</Dropdown.Item>\n                            <Dropdown.Divider />\n                            <Dropdown.Item href=\"#\">Separated link</Dropdown.Item>\n                        </Dropdown.Menu>\n                    </Dropdown>\n                </Card.Body>\n            </Card>\n        </>\n    );\n};\n\nconst DropupVariationDropdowns = () => {\n    const variations = [\n        {\n            type: DropdownButton,\n            name: 'Dropup',\n        },\n        {\n            type: SplitButton,\n            name: 'Split dropup',\n        },\n    ];\n    return (\n        <>\n            <Card>\n                <Card.Body>\n                    <h4 className=\"header-title\">Dropup variation</h4>\n                    <p className=\"text-muted font-14 mb-3\">\n                        Trigger dropdown menus above of their toggle elements, with the <code>drop</code> prop.\n                    </p>\n                    {variations.map((item, index) => (\n                        <item.type\n                            as={ButtonGroup}\n                            key={index}\n                            drop=\"up\"\n                            title={item.name}\n                            variant=\"light\"\n                            className=\"me-1\">\n                            <Dropdown.Item eventKey=\"1\">Action</Dropdown.Item>\n                            <Dropdown.Item eventKey=\"2\">Another action</Dropdown.Item>\n                            <Dropdown.Item eventKey=\"3\">Something else here</Dropdown.Item>\n                            <Dropdown.Divider />\n                            <Dropdown.Item eventKey=\"4\">Separated link</Dropdown.Item>\n                        </item.type>\n                    ))}\n                </Card.Body>\n            </Card>\n        </>\n    );\n};\n\nconst DropstartVariationDropdowns = () => {\n    const variations = [\n        {\n            type: DropdownButton,\n            name: 'Dropstart',\n        },\n        {\n            type: SplitButton,\n            name: 'Split dropstart',\n        },\n    ];\n    return (\n        <>\n            <Card>\n                <Card.Body>\n                    <h4 className=\"header-title\">Dropup variation</h4>\n                    <p className=\"text-muted font-14 mb-3\">\n                        Trigger dropdown menus left of their toggle elements, with the <code>drop</code> prop.\n                    </p>\n                    {variations.map((item, index) => (\n                        <item.type\n                            as={ButtonGroup}\n                            key={index}\n                            drop=\"start\"\n                            title={item.name}\n                            variant=\"secondary\"\n                            className=\"me-1\">\n                            <Dropdown.Item eventKey=\"1\">Action</Dropdown.Item>\n                            <Dropdown.Item eventKey=\"2\">Another action</Dropdown.Item>\n                            <Dropdown.Item eventKey=\"3\">Something else here</Dropdown.Item>\n                            <Dropdown.Divider />\n                            <Dropdown.Item eventKey=\"4\">Separated link</Dropdown.Item>\n                        </item.type>\n                    ))}\n                </Card.Body>\n            </Card>\n        </>\n    );\n};\n\nconst DropendVariationDropdowns = () => {\n    const variations = [\n        {\n            type: DropdownButton,\n            name: 'Dropend',\n        },\n        {\n            type: SplitButton,\n            name: 'Split dropend',\n        },\n    ];\n    return (\n        <>\n            <Card>\n                <Card.Body>\n                    <h4 className=\"header-title\">Dropup variation</h4>\n                    <p className=\"text-muted font-14 mb-3\">\n                        Trigger dropdown menus right of their toggle elements, with the <code>drop</code> prop.\n                    </p>\n                    {variations.map((item, index) => (\n                        <item.type\n                            as={ButtonGroup}\n                            key={index}\n                            drop=\"end\"\n                            title={item.name}\n                            variant=\"primary\"\n                            className=\"me-1\">\n                            <Dropdown.Item eventKey=\"1\">Action</Dropdown.Item>\n                            <Dropdown.Item eventKey=\"2\">Another action</Dropdown.Item>\n                            <Dropdown.Item eventKey=\"3\">Something else here</Dropdown.Item>\n                            <Dropdown.Divider />\n                            <Dropdown.Item eventKey=\"4\">Separated link</Dropdown.Item>\n                        </item.type>\n                    ))}\n                </Card.Body>\n            </Card>\n        </>\n    );\n};\n\nconst SplitColorVariantButtonDropdown = () => {\n    return (\n        <>\n            <Card>\n                <Card.Body>\n                    <h4 className=\"header-title\">Split button dropdowns</h4>\n                    <p className=\"text-muted font-14 mb-3\">\n                        You can split button dropdowns by adding <code>SplitButton</code>.\n                    </p>\n\n                    {colors.map((color, index) => {\n                        return (\n                            <SplitButton key={index} variant={color.color} title={color.name} className=\"me-1 mb-1\">\n                                <Dropdown.Item eventKey=\"1\">Action</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"2\">Another action</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"3\">Something else here</Dropdown.Item>\n                                <Dropdown.Divider />\n                                <Dropdown.Item eventKey=\"4\">Separated link</Dropdown.Item>\n                            </SplitButton>\n                        );\n                    })}\n                </Card.Body>\n            </Card>\n        </>\n    );\n};\n\nconst ButtonDropdownSizes = () => {\n    return (\n        <>\n            <Card>\n                <Card.Body>\n                    <h4 className=\"header-title\">Sizing</h4>\n                    <p className=\"text-muted font-14\">\n                        Button dropdowns work with buttons of all sizes, including default and split dropdown buttons.\n                    </p>\n\n                    {[DropdownButton, SplitButton].map((DropdownType, index) => (\n                        <DropdownType\n                            as={ButtonGroup}\n                            className=\"me-1\"\n                            key={index}\n                            size=\"lg\"\n                            title=\"Large button\"\n                            variant=\"light\">\n                            <Dropdown.Item eventKey=\"1\">Action</Dropdown.Item>\n                            <Dropdown.Item eventKey=\"2\">Another action</Dropdown.Item>\n                            <Dropdown.Item eventKey=\"3\">Something else here</Dropdown.Item>\n                            <Dropdown.Divider />\n                            <Dropdown.Item eventKey=\"4\">Separated link</Dropdown.Item>\n                        </DropdownType>\n                    ))}\n                    {[DropdownButton, SplitButton].map((DropdownType, index) => (\n                        <DropdownType\n                            as={ButtonGroup}\n                            className=\"me-1\"\n                            key={index}\n                            size=\"sm\"\n                            title=\"Small button\"\n                            variant=\"light\">\n                            <Dropdown.Item eventKey=\"1\">Action</Dropdown.Item>\n                            <Dropdown.Item eventKey=\"2\">Another action</Dropdown.Item>\n                            <Dropdown.Item eventKey=\"3\">Something else here</Dropdown.Item>\n                            <Dropdown.Divider />\n                            <Dropdown.Item eventKey=\"4\">Separated link</Dropdown.Item>\n                        </DropdownType>\n                    ))}\n                </Card.Body>\n            </Card>\n        </>\n    );\n};\n\nconst ActiveItemDropdown = () => {\n    return (\n        <>\n            <Card>\n                <Card.Body>\n                    <h4 className=\"header-title\">Active Item</h4>\n\n                    <p className=\"text-muted font-14\">\n                        Add <code>active</code> prop to item in the dropdown to <strong>style them as active</strong>.\n                    </p>\n\n                    <Dropdown>\n                        <Dropdown.Toggle variant=\"secondary\">Active Item</Dropdown.Toggle>\n                        <Dropdown.Menu>\n                            <Dropdown.Item>Regular link</Dropdown.Item>\n                            <Dropdown.Item active>Active link</Dropdown.Item>\n                            <Dropdown.Item>Another link</Dropdown.Item>\n                        </Dropdown.Menu>\n                    </Dropdown>\n                </Card.Body>\n            </Card>\n        </>\n    );\n};\n\nconst DisabledItemDropdown = () => {\n    return (\n        <>\n            <Card>\n                <Card.Body>\n                    <h4 className=\"header-title\">Disabled Item</h4>\n\n                    <p className=\"text-muted font-14\">\n                        Add <code>disabled</code> prop to item in the dropdown to{' '}\n                        <strong>style them as disabled</strong>.\n                    </p>\n\n                    <Dropdown>\n                        <Dropdown.Toggle>Active Item</Dropdown.Toggle>\n                        <Dropdown.Menu>\n                            <Dropdown.Item>Regular link</Dropdown.Item>\n                            <Dropdown.Item disabled>Disabled link</Dropdown.Item>\n                            <Dropdown.Item>Another link</Dropdown.Item>\n                        </Dropdown.Menu>\n                    </Dropdown>\n                </Card.Body>\n            </Card>\n        </>\n    );\n};\n\nconst DropdownWithHeader = () => {\n    return (\n        <>\n            <Card>\n                <Card.Body>\n                    <h4 className=\"header-title\">Headers</h4>\n\n                    <p className=\"text-muted font-14\">Add a header to label sections of actions.</p>\n\n                    <Dropdown>\n                        <Dropdown.Toggle variant=\"secondary\">Header</Dropdown.Toggle>\n                        <Dropdown.Menu>\n                            <Dropdown.Header>Dropdown header</Dropdown.Header>\n                            <Dropdown.Item>Action</Dropdown.Item>\n                            <Dropdown.Item>Another action</Dropdown.Item>\n                        </Dropdown.Menu>\n                    </Dropdown>\n                </Card.Body>\n            </Card>\n        </>\n    );\n};\n\nconst DropdownWithText = () => {\n    return (\n        <>\n            <Card>\n                <Card.Body>\n                    <h4 className=\"header-title\">Text</h4>\n\n                    <p className=\"text-muted font-14\">\n                        Place any freeform text within a dropdown menu with text and use spacing utilities. Note that\n                        you’ll likely need additional sizing styles to constrain the menu width.\n                    </p>\n\n                    <Dropdown>\n                        <Dropdown.Toggle>Text Dropdown</Dropdown.Toggle>\n                        <Dropdown.Menu className=\"p-3 text-muted\" style={{ maxWidth: '200px' }}>\n                            <p>Some example text that's free-flowing within the dropdown menu.</p>\n                            <p className=\"mb-0\">And this is more example text.</p>\n                        </Dropdown.Menu>\n                    </Dropdown>\n                </Card.Body>\n            </Card>\n        </>\n    );\n};\n\nconst CustomDropdown = () => {\n    return (\n        <>\n            <Card>\n                <Card.Body>\n                    <h4 className=\"header-title\">Forms</h4>\n\n                    <p className=\"text-muted font-14\">\n                        Put a form within a dropdown menu, or make it into a dropdown menu, and use margin or padding\n                        utilities to give it the negative space you require.\n                    </p>\n\n                    <Dropdown>\n                        <Dropdown.Toggle variant=\"secondary\">Form</Dropdown.Toggle>\n                        <Dropdown.Menu>\n                            <form className=\"px-4 py-3\">\n                                <div className=\"mb-3\">\n                                    <label htmlFor=\"exampleDropdownFormEmail1\" className=\"form-label\">\n                                        Email address\n                                    </label>\n                                    <input\n                                        type=\"email\"\n                                        className=\"form-control\"\n                                        id=\"exampleDropdownFormEmail1\"\n                                        placeholder=\"email@example.com\"\n                                    />\n                                </div>\n                                <div className=\"mb-3\">\n                                    <label htmlFor=\"exampleDropdownFormPassword1\" className=\"form-label\">\n                                        Password\n                                    </label>\n                                    <input\n                                        type=\"password\"\n                                        className=\"form-control\"\n                                        id=\"exampleDropdownFormPassword1\"\n                                        placeholder=\"Password\"\n                                    />\n                                </div>\n                                <div className=\"mb-2\">\n                                    <div className=\"form-check\">\n                                        <input type=\"checkbox\" className=\"form-check-input\" id=\"dropdownCheck\" />\n                                        <label className=\"form-check-label\" htmlFor=\"dropdownCheck\">\n                                            Remember me\n                                        </label>\n                                    </div>\n                                </div>\n                                <button type=\"submit\" className=\"btn btn-primary\">\n                                    Sign in\n                                </button>\n                            </form>\n                            <Dropdown.Divider />\n                            <Dropdown.Item eventKey=\"4\">New around here? Sign up</Dropdown.Item>\n                            <Dropdown.Item eventKey=\"4\">Forgot password?</Dropdown.Item>\n                        </Dropdown.Menu>\n                    </Dropdown>\n                </Card.Body>\n            </Card>\n        </>\n    );\n};\n\nconst Dropdowns = (): React$Element<React$FragmentType> => {\n    return (\n        <>\n            <PageTitle\n                breadCrumbItems={[\n                    { label: 'Base UI', path: '/ui/dropdowns' },\n                    { label: 'Dropdowns', path: '/ui/dropdowns', active: true },\n                ]}\n                title={'Dropdowns'}\n            />\n\n            <Row>\n                <Col lg={6}>\n                    <SingleButtonDropdown />\n                    <ColorVariantButtonDropdown />\n                    <AnimatedButtonDropdown />\n                    <DropupVariationDropdowns />\n                    <DropendVariationDropdowns />\n                    <DisabledItemDropdown />\n                    <DropdownWithText />\n                </Col>\n\n                <Col lg={6}>\n                    <DropdownMenuAlignment />\n                    <SplitColorVariantButtonDropdown />\n                    <ButtonDropdownSizes />\n                    <DropstartVariationDropdowns />\n                    <ActiveItemDropdown />\n                    <DropdownWithHeader />\n                    <CustomDropdown />\n                </Col>\n            </Row>\n        </>\n    );\n};\n\nexport default Dropdowns;\n","// @flow\nimport React from 'react';\nimport { Row, Col, Breadcrumb } from 'react-bootstrap';\n\ntype BreadcrumbItems = {\n    label: string,\n    path: string,\n    active?: boolean,\n};\n\ntype PageTitleProps = {\n    breadCrumbItems: Array<BreadcrumbItems>,\n    title: string,\n};\n\n/**\n * PageTitle\n */\nconst PageTitle = (props: PageTitleProps): React$Element<any> => {\n    return (\n        <Row>\n            <Col>\n                <div className=\"page-title-box\">\n                    <div className=\"page-title-right\">\n                        <Breadcrumb listProps={{ className: 'm-0' }}>\n                            <Breadcrumb.Item href=\"/\">Home</Breadcrumb.Item>\n\n                            {props.breadCrumbItems.map((item, index) => {\n                                return item.active ? (\n                                    <Breadcrumb.Item active key={index}>\n                                        {item.label}\n                                    </Breadcrumb.Item>\n                                ) : (\n                                    <Breadcrumb.Item key={index} href={item.path}>\n                                        {item.label}\n                                    </Breadcrumb.Item>\n                                );\n                            })}\n                        </Breadcrumb>\n                    </div>\n                    <h4 className=\"page-title\">{props.title}</h4>\n                </div>\n            </Col>\n        </Row>\n    );\n};\n\nexport default PageTitle;\n","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix, useBootstrapBreakpoints } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Row = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'row');\n  const breakpoints = useBootstrapBreakpoints();\n  const sizePrefix = `${decoratedBsPrefix}-cols`;\n  const classes = [];\n  breakpoints.forEach(brkPoint => {\n    const propValue = props[brkPoint];\n    delete props[brkPoint];\n    let cols;\n\n    if (propValue != null && typeof propValue === 'object') {\n      ({\n        cols\n      } = propValue);\n    } else {\n      cols = propValue;\n    }\n\n    const infix = brkPoint !== 'xs' ? `-${brkPoint}` : '';\n    if (cols != null) classes.push(`${sizePrefix}${infix}-${cols}`);\n  });\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, decoratedBsPrefix, ...classes)\n  });\n});\nRow.displayName = 'Row';\nexport default Row;","import classNames from 'classnames';\nimport * as React from 'react';\nimport Anchor from '@restart/ui/Anchor';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  active: false,\n  linkProps: {}\n};\nconst BreadcrumbItem = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  active,\n  children,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'li',\n  linkAs: LinkComponent = Anchor,\n  linkProps,\n  href,\n  title,\n  target,\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'breadcrumb-item');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(prefix, className, {\n      active\n    }),\n    \"aria-current\": active ? 'page' : undefined,\n    children: active ? children : /*#__PURE__*/_jsx(LinkComponent, { ...linkProps,\n      href: href,\n      title: title,\n      target: target,\n      children: children\n    })\n  });\n});\nBreadcrumbItem.displayName = 'BreadcrumbItem';\nBreadcrumbItem.defaultProps = defaultProps;\nexport default BreadcrumbItem;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport BreadcrumbItem from './BreadcrumbItem';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  label: 'breadcrumb',\n  listProps: {}\n};\nconst Breadcrumb = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  listProps,\n  children,\n  label,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'nav',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'breadcrumb');\n  return /*#__PURE__*/_jsx(Component, {\n    \"aria-label\": label,\n    className: className,\n    ref: ref,\n    ...props,\n    children: /*#__PURE__*/_jsx(\"ol\", { ...listProps,\n      className: classNames(prefix, listProps == null ? void 0 : listProps.className),\n      children: children\n    })\n  });\n});\nBreadcrumb.displayName = 'Breadcrumb';\nBreadcrumb.defaultProps = defaultProps;\nexport default Object.assign(Breadcrumb, {\n  Item: BreadcrumbItem\n});","import { useMemo } from 'react';\n\nvar toFnRef = function toFnRef(ref) {\n  return !ref || typeof ref === 'function' ? ref : function (value) {\n    ref.current = value;\n  };\n};\n\nexport function mergeRefs(refA, refB) {\n  var a = toFnRef(refA);\n  var b = toFnRef(refB);\n  return function (value) {\n    if (a) a(value);\n    if (b) b(value);\n  };\n}\n/**\n * Create and returns a single callback ref composed from two other Refs.\n *\n * ```tsx\n * const Button = React.forwardRef((props, ref) => {\n *   const [element, attachRef] = useCallbackRef<HTMLButtonElement>();\n *   const mergedRef = useMergedRefs(ref, attachRef);\n *\n *   return <button ref={mergedRef} {...props}/>\n * })\n * ```\n *\n * @param refA A Callback or mutable Ref\n * @param refB A Callback or mutable Ref\n * @category refs\n */\n\nfunction useMergedRefs(refA, refB) {\n  return useMemo(function () {\n    return mergeRefs(refA, refB);\n  }, [refA, refB]);\n}\n\nexport default useMergedRefs;","import * as React from 'react';\nconst context = /*#__PURE__*/React.createContext(null);\ncontext.displayName = 'InputGroupContext';\nexport default context;","import PropTypes from 'prop-types';\nconst alignDirection = PropTypes.oneOf(['start', 'end']);\nexport const alignPropType = PropTypes.oneOfType([alignDirection, PropTypes.shape({\n  sm: alignDirection\n}), PropTypes.shape({\n  md: alignDirection\n}), PropTypes.shape({\n  lg: alignDirection\n}), PropTypes.shape({\n  xl: alignDirection\n}), PropTypes.shape({\n  xxl: alignDirection\n}), PropTypes.object]);","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  vertical: false,\n  role: 'group'\n};\nconst ButtonGroup = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  size,\n  vertical,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...rest\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'btn-group');\n  let baseClass = prefix;\n  if (vertical) baseClass = `${prefix}-vertical`;\n  return /*#__PURE__*/_jsx(Component, { ...rest,\n    ref: ref,\n    className: classNames(className, baseClass, size && `${prefix}-${size}`)\n  });\n});\nButtonGroup.displayName = 'ButtonGroup';\nButtonGroup.defaultProps = defaultProps;\nexport default ButtonGroup;","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Dropdown from './Dropdown';\nimport DropdownToggle from './DropdownToggle';\nimport DropdownMenu from './DropdownMenu';\nimport { alignPropType } from './types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst propTypes = {\n  /**\n   * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.\n   * @type {string}\n   */\n  id: PropTypes.string,\n\n  /** An `href` passed to the Toggle component */\n  href: PropTypes.string,\n\n  /** An `onClick` handler passed to the Toggle component */\n  onClick: PropTypes.func,\n\n  /** The content of the non-toggle Button.  */\n  title: PropTypes.node.isRequired,\n\n  /** Disables both Buttons  */\n  disabled: PropTypes.bool,\n\n  /**\n   * Aligns the dropdown menu.\n   *\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\n   *\n   * @type {\"start\"|\"end\"|{ sm: \"start\"|\"end\" }|{ md: \"start\"|\"end\" }|{ lg: \"start\"|\"end\" }|{ xl: \"start\"|\"end\"}|{ xxl: \"start\"|\"end\"} }\n   */\n  align: alignPropType,\n\n  /** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */\n  menuRole: PropTypes.string,\n\n  /** Whether to render the dropdown menu in the DOM before the first time it is shown */\n  renderMenuOnMount: PropTypes.bool,\n\n  /**\n   *  Which event when fired outside the component will cause it to be closed.\n   *\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\n   */\n  rootCloseEvent: PropTypes.string,\n\n  /**\n   * Menu color variant.\n   *\n   * Omitting this will use the default light color.\n   */\n  menuVariant: PropTypes.oneOf(['dark']),\n\n  /** @ignore */\n  bsPrefix: PropTypes.string,\n\n  /** @ignore */\n  variant: PropTypes.string,\n\n  /** @ignore */\n  size: PropTypes.string\n};\n/**\n * A convenience component for simple or general use dropdowns. Renders a `Button` toggle and all `children`\n * are passed directly to the default `Dropdown.Menu`. This component accepts all of\n * [`Dropdown`'s props](#dropdown-props).\n *\n * _All unknown props are passed through to the `Dropdown` component._ Only\n * the Button `variant`, `size` and `bsPrefix` props are passed to the toggle,\n * along with menu-related props are passed to the `Dropdown.Menu`\n */\n\nconst DropdownButton = /*#__PURE__*/React.forwardRef(({\n  title,\n  children,\n  bsPrefix,\n  rootCloseEvent,\n  variant,\n  size,\n  menuRole,\n  renderMenuOnMount,\n  disabled,\n  href,\n  id,\n  menuVariant,\n  ...props\n}, ref) => /*#__PURE__*/_jsxs(Dropdown, {\n  ref: ref,\n  ...props,\n  children: [/*#__PURE__*/_jsx(DropdownToggle, {\n    id: id,\n    href: href,\n    size: size,\n    variant: variant,\n    disabled: disabled,\n    childBsPrefix: bsPrefix,\n    children: title\n  }), /*#__PURE__*/_jsx(DropdownMenu, {\n    role: menuRole,\n    renderOnMount: renderMenuOnMount,\n    rootCloseEvent: rootCloseEvent,\n    variant: menuVariant,\n    children: children\n  })]\n}));\nDropdownButton.displayName = 'DropdownButton';\nDropdownButton.propTypes = propTypes;\nexport default DropdownButton;"],"sourceRoot":""}