{"version":3,"sources":["pages/uikit/RangeSliders.js","components/PageTitle.js"],"names":["RangeSliders","useState","textValue","percent","selectedVals","setSelectedVals","selectedRanges","setSelectedRanges","onSlide","index","value","selectedValues","toFixed","onSlide2","selectedRange","breadCrumbItems","label","path","active","title","xl","Body","className","range","min","max","start","connect","render","handle","un","step","PageTitle","props","listProps","Item","href","map","item"],"mappings":"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","file":"static/js/143.8ca5d7ef.chunk.js","sourcesContent":["// @flow\nimport React, { useState } from 'react';\nimport { Row, Col, Card } from 'react-bootstrap';\nimport Nouislider from 'nouislider-react';\nimport 'nouislider/distribute/nouislider.css';\n\n// components\nimport PageTitle from '../../components/PageTitle';\n\n// RangeSliders\nconst RangeSliders = (): React$Element<React$FragmentType> => {\n    const [selectedVals, setSelectedVals] = useState({\n        '1': { textValue: 20, percent: 20 },\n        '2': { textValue: 20, percent: 20 },\n    });\n    const [selectedRanges, setSelectedRanges] = useState({\n        '1': '20-45',\n        '2': '20-45',\n    });\n\n    const onSlide = (index, value, percent) => {\n        let selectedValues = { ...selectedVals };\n        selectedValues[index] = {\n            textValue: value[0].toFixed(2),\n            percent: percent[0].toFixed(2),\n        };\n        setSelectedVals(selectedValues);\n    };\n\n    const onSlide2 = (index, value) => {\n        let selectedRange = { ...selectedRanges };\n        selectedRange[index] = value[0].toFixed(2) + '-' + value[1].toFixed(2);\n        setSelectedRanges(selectedRange);\n    };\n\n    return (\n        <>\n            <PageTitle\n                breadCrumbItems={[\n                    { label: 'Extended UI', path: '/ui/rangesliders' },\n                    { label: 'Range Sliders', path: '/ui/rangesliders', active: true },\n                ]}\n                title={'Range Sliders'}\n            />\n\n            <Row>\n                <Col xl={6}>\n                    <Card>\n                        <Card.Body>\n                            <h4 className=\"header-title\">Single</h4>\n                            <p className=\"text-muted font-14\">Slider with single selecrtor</p>\n\n                            <Nouislider\n                                range={{ min: 0, max: 100 }}\n                                start={[20]}\n                                connect\n                                onSlide={(render, handle, value, un, percent) => onSlide(1, value, percent)}\n                            />\n                            <p className=\"mt-2 mb-0\">\n                                Value:{' '}\n                                {selectedVals ? (\n                                    <span>\n                                        {selectedVals[1]['textValue']}, &nbsp;\n                                        {selectedVals[1]['percent']}%\n                                    </span>\n                                ) : null}\n                            </p>\n                        </Card.Body>\n                    </Card>\n                </Col>\n\n                <Col xl={6}>\n                    <Card>\n                        <Card.Body>\n                            <h4 className=\"header-title\">Range</h4>\n                            <p className=\"text-muted font-14\">Slider with range selecrtor</p>\n\n                            <Nouislider\n                                range={{ min: 10, max: 150 }}\n                                start={[20, 45]}\n                                connect\n                                onSlide={(render, handle, value, un, percent) => onSlide2(1, value)}\n                            />\n                            <p className=\"mt-2 mb-0\">\n                                Value: {selectedRanges ? <span>{selectedRanges[1]}</span> : null}\n                            </p>\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n\n            <Row>\n                <Col xl={6}>\n                    <Card>\n                        <Card.Body>\n                            <h4 className=\"header-title\">Slider Step</h4>\n                            <p className=\"text-muted font-14\">Slider with step value</p>\n\n                            <Nouislider\n                                range={{ min: 0, max: 100 }}\n                                start={[20]}\n                                step={10}\n                                connect\n                                onSlide={(render, handle, value, un, percent) => onSlide(2, value, percent)}\n                            />\n                            <p className=\"mt-2 mb-0\">\n                                Value:{' '}\n                                {selectedVals ? (\n                                    <span>\n                                        {selectedVals[2]['textValue']}, &nbsp;\n                                        {selectedVals[2]['percent']}%\n                                    </span>\n                                ) : null}\n                            </p>\n                        </Card.Body>\n                    </Card>\n                </Col>\n\n                <Col xl={6}>\n                    <Card>\n                        <Card.Body>\n                            <h4 className=\"header-title\">Range Slider with Steps</h4>\n                            <p className=\"text-muted font-14\">Slider with range selecrtor with fixed step value</p>\n\n                            <Nouislider\n                                range={{ min: 10, max: 150 }}\n                                start={[20, 45]}\n                                step={15}\n                                connect\n                                onSlide={(render, handle, value, un, percent) => onSlide2(2, value)}\n                            />\n                            <p className=\"mt-2 mb-0\">\n                                Value: {selectedRanges ? <span>{selectedRanges[2]}</span> : null}\n                            </p>\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n        </>\n    );\n};\n\nexport default RangeSliders;\n","// @flow\nimport React from 'react';\nimport { Row, Col, Breadcrumb } from 'react-bootstrap';\n\ntype BreadcrumbItems = {\n    label: string,\n    path: string,\n    active?: boolean,\n};\n\ntype PageTitleProps = {\n    breadCrumbItems: Array<BreadcrumbItems>,\n    title: string,\n};\n\n/**\n * PageTitle\n */\nconst PageTitle = (props: PageTitleProps): React$Element<any> => {\n    return (\n        <Row>\n            <Col>\n                <div className=\"page-title-box\">\n                    <div className=\"page-title-right\">\n                        <Breadcrumb listProps={{ className: 'm-0' }}>\n                            <Breadcrumb.Item href=\"/\">Home</Breadcrumb.Item>\n\n                            {props.breadCrumbItems.map((item, index) => {\n                                return item.active ? (\n                                    <Breadcrumb.Item active key={index}>\n                                        {item.label}\n                                    </Breadcrumb.Item>\n                                ) : (\n                                    <Breadcrumb.Item key={index} href={item.path}>\n                                        {item.label}\n                                    </Breadcrumb.Item>\n                                );\n                            })}\n                        </Breadcrumb>\n                    </div>\n                    <h4 className=\"page-title\">{props.title}</h4>\n                </div>\n            </Col>\n        </Row>\n    );\n};\n\nexport default PageTitle;\n"],"sourceRoot":""}