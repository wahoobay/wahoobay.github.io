{"version":3,"sources":["pages/tables/Basic.js","components/PageTitle.js"],"names":["records","id","firstName","lastName","username","BasicTable","Body","className","map","record","index","scope","InverseTable","variant","StripedRowsTable","striped","TableHeadOption","BorderedTable","bordered","to","BorderedColorTable","HoverableTable","hover","SmallTable","size","ResponsiveTable","responsive","Tables","breadCrumbItems","label","path","active","title","xl","xs","PageTitle","props","listProps","Item","href","item"],"mappings":"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","file":"static/js/134.0af42e38.chunk.js","sourcesContent":["// @flow\nimport React from 'react';\nimport { Row, Col, Card, Table } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\n\n// components\nimport PageTitle from '../../components/PageTitle';\n\n// dummy records\nconst records = [\n    { id: 1, firstName: 'Mark', lastName: 'Otto', username: '@mdo' },\n    { id: 2, firstName: 'Jacob', lastName: 'Thornton', username: '@fat' },\n    { id: 3, firstName: 'Dave', lastName: 'G', username: '@dave' },\n    { id: 4, firstName: 'Nik', lastName: 'N', username: '@nikn' },\n    { id: 5, firstName: 'Shreyu', lastName: 'Navadiya', username: '@sn' },\n];\n\nconst BasicTable = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Basic example</h4>\n                <p className=\"text-muted font-14\">\n                    Just use <code>Table</code> element\n                </p>\n\n                <Table className=\"mb-0\">\n                    <thead>\n                        <tr>\n                            <th>#</th>\n                            <th>First Name</th>\n                            <th>Last Name</th>\n                            <th>Username</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {records.map((record, index) => {\n                            return (\n                                <tr key={index}>\n                                    <th scope=\"row\">{record.id}</th>\n                                    <td>{record.firstName}</td>\n                                    <td>{record.lastName}</td>\n                                    <td>{record.username}</td>\n                                </tr>\n                            );\n                        })}\n                    </tbody>\n                </Table>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst InverseTable = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Inverse Table</h4>\n                <p className=\"text-muted font-14\">\n                    You can also invert the colors—with light text on dark backgrounds—by specifying <code>dark</code>{' '}\n                    attribute\n                </p>\n\n                <Table className=\"mb-0\" variant=\"dark\">\n                    <thead>\n                        <tr>\n                            <th>#</th>\n                            <th>First Name</th>\n                            <th>Last Name</th>\n                            <th>Username</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {records.map((record, index) => {\n                            return (\n                                <tr key={index}>\n                                    <th scope=\"row\">{record.id}</th>\n                                    <td>{record.firstName}</td>\n                                    <td>{record.lastName}</td>\n                                    <td>{record.username}</td>\n                                </tr>\n                            );\n                        })}\n                    </tbody>\n                </Table>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst StripedRowsTable = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Striped Rows</h4>\n                <p className=\"text-muted font-14\">\n                    Add <code>striped</code> attribute to table\n                </p>\n\n                <Table className=\"mb-0\" striped>\n                    <thead>\n                        <tr>\n                            <th>#</th>\n                            <th>First Name</th>\n                            <th>Last Name</th>\n                            <th>Username</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {records.map((record, index) => {\n                            return (\n                                <tr key={index}>\n                                    <th scope=\"row\">{record.id}</th>\n                                    <td>{record.firstName}</td>\n                                    <td>{record.lastName}</td>\n                                    <td>{record.username}</td>\n                                </tr>\n                            );\n                        })}\n                    </tbody>\n                </Table>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst TableHeadOption = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Table head options</h4>\n                <p className=\"text-muted font-14\">\n                    Use one of two modifier classes to make <code>&lt;thead&gt;</code>s appear light or dark gray.\n                </p>\n\n                <Table className=\"table-centered mb-0\">\n                    <thead className=\"table-dark\">\n                        <tr>\n                            <th>#</th>\n                            <th>First Name</th>\n                            <th>Last Name</th>\n                            <th>Username</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {records.map((record, index) => {\n                            return (\n                                <tr key={index}>\n                                    <th scope=\"row\">{record.id}</th>\n                                    <td>{record.firstName}</td>\n                                    <td>{record.lastName}</td>\n                                    <td>{record.username}</td>\n                                </tr>\n                            );\n                        })}\n                    </tbody>\n                </Table>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst BorderedTable = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Bordered table</h4>\n                <p className=\"text-muted font-14\">\n                    Add <code>bordered</code> attribute for borders on all sides of the table and cells.\n                </p>\n\n                <Table className=\"mb-0\" bordered>\n                    <thead>\n                        <tr>\n                            <th>#</th>\n                            <th>First Name</th>\n                            <th>Last Name</th>\n                            <th>Username</th>\n                            <th className=\"text-center\">Action</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {records.map((record, index) => {\n                            return (\n                                <tr key={index}>\n                                    <th scope=\"row\">{record.id}</th>\n                                    <td>{record.firstName}</td>\n                                    <td>{record.lastName}</td>\n                                    <td>{record.username}</td>\n                                    <td className=\"table-action text-center\">\n                                        <Link to=\"#\" className=\"action-icon\">\n                                            <i className=\"mdi mdi-delete\"></i>\n                                        </Link>\n                                    </td>\n                                </tr>\n                            );\n                        })}\n                    </tbody>\n                </Table>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst BorderedColorTable = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Bordered table</h4>\n                <p className=\"text-muted font-14\">\n                    Add <code>.table-bordered</code> & <code>.border-primary</code> can be added to change colors.\n                </p>\n\n                <Table className=\"mb-0 border-primary table-centered\" bordered>\n                    <thead>\n                        <tr>\n                            <th>#</th>\n                            <th>First Name</th>\n                            <th>Last Name</th>\n                            <th>Username</th>\n                            <th className=\"text-center\">Action</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {records.map((record, index) => {\n                            return (\n                                <tr key={index}>\n                                    <th scope=\"row\">{record.id}</th>\n                                    <td>{record.firstName}</td>\n                                    <td>{record.lastName}</td>\n                                    <td>{record.username}</td>\n                                    <td className=\"table-action text-center\">\n                                        <Link to=\"#\" className=\"action-icon\">\n                                            <i className=\"mdi mdi-delete\"></i>\n                                        </Link>\n                                    </td>\n                                </tr>\n                            );\n                        })}\n                    </tbody>\n                </Table>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst HoverableTable = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Hoverable Rows</h4>\n                <p className=\"text-muted font-14\">\n                    Add <code>hover</code> attribute to enable a hover state on table rows\n                </p>\n\n                <Table className=\"mb-0\" hover>\n                    <thead>\n                        <tr>\n                            <th>#</th>\n                            <th>First Name</th>\n                            <th>Last Name</th>\n                            <th>Username</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {records.map((record, index) => {\n                            return (\n                                <tr key={index}>\n                                    <th scope=\"row\">{record.id}</th>\n                                    <td>{record.firstName}</td>\n                                    <td>{record.lastName}</td>\n                                    <td>{record.username}</td>\n                                </tr>\n                            );\n                        })}\n                    </tbody>\n                </Table>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst SmallTable = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Small table</h4>\n                <p className=\"text-muted font-14\">\n                    Add <code>size=\"sm\"</code> attribute to make tables more compact by cutting cell padding in half\n                </p>\n\n                <Table className=\"mb-0\" size=\"sm\">\n                    <thead>\n                        <tr>\n                            <th>#</th>\n                            <th>First Name</th>\n                            <th>Last Name</th>\n                            <th>Username</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {records.map((record, index) => {\n                            return (\n                                <tr key={index}>\n                                    <th scope=\"row\">{record.id}</th>\n                                    <td>{record.firstName}</td>\n                                    <td>{record.lastName}</td>\n                                    <td>{record.username}</td>\n                                </tr>\n                            );\n                        })}\n                    </tbody>\n                </Table>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst ResponsiveTable = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Always responsive</h4>\n                <p className=\"text-muted font-14\">\n                    Across every breakpoint, use <code>responsive</code> attribute to create responsive tables\n                </p>\n\n                <Table className=\"mb-0\" responsive>\n                    <thead>\n                        <tr>\n                            <th>#</th>\n                            <th>First Name</th>\n                            <th>Last Name</th>\n                            <th>Username</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {records.map((record, index) => {\n                            return (\n                                <tr key={index}>\n                                    <th scope=\"row\">{record.id}</th>\n                                    <td>{record.firstName}</td>\n                                    <td>{record.lastName}</td>\n                                    <td>{record.username}</td>\n                                </tr>\n                            );\n                        })}\n                    </tbody>\n                </Table>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst Tables = (): React$Element<React$FragmentType> => {\n    return (\n        <>\n            <PageTitle\n                breadCrumbItems={[\n                    { label: 'Tables', path: '/ui/tables/basic' },\n                    { label: 'Basic Tables', path: '/ui/tables/basic', active: true },\n                ]}\n                title={'Basic Tables'}\n            />\n\n            <Row>\n                <Col xl={6}>\n                    <BasicTable />\n                </Col>\n\n                <Col xl={6}>\n                    <InverseTable />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col xl={6}>\n                    <StripedRowsTable />\n                </Col>\n\n                <Col xl={6}>\n                    <TableHeadOption />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col xl={6}>\n                    <HoverableTable />\n                </Col>\n\n                <Col xl={6}>\n                    <SmallTable />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col xl={6}>\n                    <BorderedTable />\n                </Col>\n\n                <Col xl={6}>\n                    <BorderedColorTable />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col xs={12}>\n                    <ResponsiveTable />\n                </Col>\n            </Row>\n        </>\n    );\n};\n\nexport default Tables;\n","// @flow\nimport React from 'react';\nimport { Row, Col, Breadcrumb } from 'react-bootstrap';\n\ntype BreadcrumbItems = {\n    label: string,\n    path: string,\n    active?: boolean,\n};\n\ntype PageTitleProps = {\n    breadCrumbItems: Array<BreadcrumbItems>,\n    title: string,\n};\n\n/**\n * PageTitle\n */\nconst PageTitle = (props: PageTitleProps): React$Element<any> => {\n    return (\n        <Row>\n            <Col>\n                <div className=\"page-title-box\">\n                    <div className=\"page-title-right\">\n                        <Breadcrumb listProps={{ className: 'm-0' }}>\n                            <Breadcrumb.Item href=\"/\">Home</Breadcrumb.Item>\n\n                            {props.breadCrumbItems.map((item, index) => {\n                                return item.active ? (\n                                    <Breadcrumb.Item active key={index}>\n                                        {item.label}\n                                    </Breadcrumb.Item>\n                                ) : (\n                                    <Breadcrumb.Item key={index} href={item.path}>\n                                        {item.label}\n                                    </Breadcrumb.Item>\n                                );\n                            })}\n                        </Breadcrumb>\n                    </div>\n                    <h4 className=\"page-title\">{props.title}</h4>\n                </div>\n            </Col>\n        </Row>\n    );\n};\n\nexport default PageTitle;\n"],"sourceRoot":""}