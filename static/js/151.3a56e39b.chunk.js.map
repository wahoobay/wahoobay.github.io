{"version":3,"sources":["pages/apps/Ecommerce/Orders.js"],"names":["columns","Header","accessor","sort","Cell","row","to","className","original","order_id","order_date","order_time","classNames","payment_status","order_status","classes","sizePerPageList","text","value","Orders","useState","orders","orderList","setOrderList","breadCrumbItems","label","path","active","title","xs","Body","xl","htmlFor","id","onChange","e","OrderStatusGroup","updatedData","filter","o","includes","changeOrderStatusGroup","target","variant","data","pageSize","isSortable","pagination","isSelectable","isSearchable","theadClass","searchBoxClass"],"mappings":"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","file":"static/js/151.3a56e39b.chunk.js","sourcesContent":["// @flow\nimport React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Row, Col, Card, Button } from 'react-bootstrap';\nimport classNames from 'classnames';\n\n// components\nimport PageTitle from '../../../components/PageTitle';\nimport Table from '../../../components/Table';\n\n// dummy data\nimport { orders } from './Data';\n\n/* order column render */\nconst OrderColumn = ({ row }) => {\n    return (\n        <>\n            <Link to=\"#\" className=\"text-body fw-bold\">\n                #BM{row.original.order_id}\n            </Link>\n        </>\n    );\n};\n\n/* orderdate column render */\nconst OrderDateColumn = ({ row }) => {\n    return (\n        <>\n            {row.original.order_date} <small className=\"text-muted\">{row.original.order_time}</small>\n        </>\n    );\n};\n\n/* payment column render */\nconst PaymentStatusColumn = ({ row }) => {\n    return (\n        <>\n            <h5>\n                <span\n                    className={classNames('badge', {\n                        'badge-success-lighten': row.original.payment_status === 'Paid',\n                        'badge-danger-lighten': row.original.payment_status === 'Payment Failed',\n                        'badge-info-lighten': row.original.payment_status === 'Unpaid',\n                        'badge-warning-lighten': row.original.payment_status === 'Awaiting Authorization',\n                    })}>\n                    {row.original.payment_status === 'Paid' && <i className=\"mdi mdi-coin me-1\"></i>}\n                    {row.original.payment_status === 'Payment Failed' && <i className=\"mdi mdi-cancel me-1\"></i>}\n                    {row.original.payment_status === 'Unpaid' && <i className=\"mdi mdi-cash me-1\"></i>}\n                    {row.original.payment_status === 'Awaiting Authorization' && (\n                        <i className=\"mdi mdi-timer-sand me-1\"></i>\n                    )}\n                    {row.original.payment_status}\n                </span>\n            </h5>\n        </>\n    );\n};\n\n/* status column render */\nconst StatusColumn = ({ row }) => {\n    return (\n        <>\n            <h5>\n                <span\n                    className={classNames('badge', {\n                        'badge-success-lighten': row.original.order_status === 'Delivered',\n                        'badge-danger-lighten': row.original.order_status === 'Cancelled',\n                        'badge-info-lighten': row.original.order_status === 'Shipped',\n                        'badge-warning-lighten': row.original.order_status === 'Processing',\n                    })}>\n                    {row.original.order_status}\n                </span>\n            </h5>\n        </>\n    );\n};\n\n/* action column render */\nconst ActionColumn = ({ row }) => {\n    return (\n        <>\n            <Link to=\"#\" className=\"action-icon\">\n                {' '}\n                <i className=\"mdi mdi-eye\"></i>\n            </Link>\n            <Link to=\"#\" className=\"action-icon\">\n                {' '}\n                <i className=\"mdi mdi-square-edit-outline\"></i>\n            </Link>\n            <Link to=\"#\" className=\"action-icon\">\n                {' '}\n                <i className=\"mdi mdi-delete\"></i>\n            </Link>\n        </>\n    );\n};\n\n// get all columns\nconst columns = [\n    {\n        Header: 'Order ID',\n        accessor: 'order_id',\n        sort: true,\n        Cell: OrderColumn,\n    },\n    {\n        Header: 'Date',\n        accessor: 'order_date',\n        sort: false,\n        Cell: OrderDateColumn,\n    },\n    {\n        Header: 'Payment Status',\n        accessor: 'payment_status',\n        sort: false,\n        Cell: PaymentStatusColumn,\n    },\n    {\n        Header: 'Total',\n        accessor: 'total',\n        sort: false,\n    },\n    {\n        Header: 'Payment Method',\n        accessor: 'payment_method',\n        sort: false,\n    },\n    {\n        Header: 'Status',\n        accessor: 'order_status',\n        sort: false,\n        Cell: StatusColumn,\n    },\n    {\n        Header: 'Action',\n        accessor: 'action',\n        sort: false,\n        classes: 'table-action',\n        Cell: ActionColumn,\n    },\n];\n\n// get pagelist to display\nconst sizePerPageList = [\n    {\n        text: '10',\n        value: 10,\n    },\n    {\n        text: '20',\n        value: 20,\n    },\n    {\n        text: '50',\n        value: 50,\n    },\n];\n\n// main component\nconst Orders = (): React$Element<React$FragmentType> => {\n    const [orderList, setOrderList] = useState(orders);\n\n    // change order status group\n    const changeOrderStatusGroup = (OrderStatusGroup) => {\n        let updatedData = orders;\n        //  filter\n        updatedData =\n            OrderStatusGroup === 'All'\n                ? orders\n                : [...orders].filter((o) => o.payment_status?.includes(OrderStatusGroup));\n        setOrderList(updatedData);\n    };\n\n    return (\n        <>\n            <PageTitle\n                breadCrumbItems={[\n                    { label: 'eCommerce', path: '/apps/ecommerce/orders' },\n                    { label: 'Orders', path: '/apps/ecommerce/orders', active: true },\n                ]}\n                title={'Orders'}\n            />\n\n            <Row>\n                <Col xs={12}>\n                    <Card>\n                        <Card.Body>\n                            <Row className=\"mb-2\">\n                                <Col xl={8}>\n                                    <form className=\"row gy-2 gx-2 align-items-center justify-content-xl-start justify-content-between\">\n                                        <div className=\"col-auto\">\n                                            <div className=\"d-flex align-items-center w-auto\">\n                                                <label htmlFor=\"status-select\" className=\"me-2\">\n                                                    Status\n                                                </label>\n                                                <select\n                                                    className=\"form-select\"\n                                                    id=\"status-select\"\n                                                    onChange={(e) => changeOrderStatusGroup(e.target.value)}>\n                                                    <option value=\"All\">All</option>\n                                                    <option value=\"Paid\">Paid</option>\n                                                    <option value=\"Authorization\">Awaiting Authorization</option>\n                                                    <option value=\"Failed\">Payment failed</option>\n                                                    <option value=\"Unpaid\">Unpaid</option>\n                                                </select>\n                                            </div>\n                                        </div>\n                                    </form>\n                                </Col>\n\n                                <Col xl={4}>\n                                    <div className=\"text-lg-end mt-xl-0 mt-2\">\n                                        <Button variant=\"danger\" className=\"mb-2 me-2\">\n                                            <i className=\"mdi mdi-basket me-1\"></i> Add New Order\n                                        </Button>\n                                        <Button variant=\"light\" className=\"mb-2\">\n                                            Export\n                                        </Button>\n                                    </div>\n                                </Col>\n                            </Row>\n\n                            <Table\n                                columns={columns}\n                                data={orderList}\n                                pageSize={10}\n                                sizePerPageList={sizePerPageList}\n                                isSortable={true}\n                                pagination={true}\n                                isSelectable={true}\n                                isSearchable={true}\n                                theadClass=\"table-light\"\n                                searchBoxClass=\"mb-2\"\n                            />\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n        </>\n    );\n};\n\nexport default Orders;\n"],"sourceRoot":""}