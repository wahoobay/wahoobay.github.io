{"version":3,"sources":["components/PageTitle.js","pages/uikit/Badges.js"],"names":["PageTitle","props","className","listProps","Item","href","breadCrumbItems","map","item","index","active","label","path","title","colors","name","color","DefaultBadges","Body","to","ContexualBadges","classNames","bg","PillBadges","pill","BadgePosition","variant","Badges","xl"],"mappings":"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","file":"static/js/135.a6f2d30d.chunk.js","sourcesContent":["// @flow\nimport React from 'react';\nimport { Row, Col, Breadcrumb } from 'react-bootstrap';\n\ntype BreadcrumbItems = {\n    label: string,\n    path: string,\n    active?: boolean,\n};\n\ntype PageTitleProps = {\n    breadCrumbItems: Array<BreadcrumbItems>,\n    title: string,\n};\n\n/**\n * PageTitle\n */\nconst PageTitle = (props: PageTitleProps): React$Element<any> => {\n    return (\n        <Row>\n            <Col>\n                <div className=\"page-title-box\">\n                    <div className=\"page-title-right\">\n                        <Breadcrumb listProps={{ className: 'm-0' }}>\n                            <Breadcrumb.Item href=\"/\">Home</Breadcrumb.Item>\n\n                            {props.breadCrumbItems.map((item, index) => {\n                                return item.active ? (\n                                    <Breadcrumb.Item active key={index}>\n                                        {item.label}\n                                    </Breadcrumb.Item>\n                                ) : (\n                                    <Breadcrumb.Item key={index} href={item.path}>\n                                        {item.label}\n                                    </Breadcrumb.Item>\n                                );\n                            })}\n                        </Breadcrumb>\n                    </div>\n                    <h4 className=\"page-title\">{props.title}</h4>\n                </div>\n            </Col>\n        </Row>\n    );\n};\n\nexport default PageTitle;\n","// @flow\nimport React from 'react';\nimport { Row, Col, Card, Badge, Button } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport classNames from 'classnames';\n\n// components\nimport PageTitle from '../../components/PageTitle';\n\nconst colors = [\n    {\n        name: 'Primary',\n        color: 'primary',\n    },\n    {\n        name: 'Secondary',\n        color: 'secondary',\n    },\n    {\n        name: 'Success',\n        color: 'success',\n    },\n    {\n        name: 'Danger',\n        color: 'danger',\n    },\n    {\n        name: 'Warning',\n        color: 'warning',\n    },\n    {\n        name: 'Info',\n        color: 'info',\n    },\n    {\n        name: 'Light',\n        color: 'light',\n    },\n    {\n        name: 'Dark',\n        color: 'dark',\n    },\n];\n\nconst DefaultBadges = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Default</h4>\n                <p className=\"text-muted font-14 mb-3\">\n                    A simple labeling component. Badges scale to match the size of the immediate parent element by using\n                    relative font sizing and <code>em</code> units.\n                </p>\n\n                <h1>\n                    h1.Example heading <span className=\"badge bg-secondary text-light\">New</span>\n                </h1>\n                <h2>\n                    h2.Example heading <span className=\"badge badge-success-lighten\">New</span>\n                </h2>\n                <h3>\n                    h3.Example heading <span className=\"badge bg-primary\">New</span>\n                </h3>\n                <h4>\n                    h4.Example heading{' '}\n                    <Link to=\"#\" className=\"badge badge-info-lighten\">\n                        Info Link\n                    </Link>\n                </h4>\n                <h5>\n                    h5.Example heading <span className=\"badge badge-outline-warning\">New</span>\n                </h5>\n                <h6>\n                    h6.Example heading <span className=\"badge bg-danger\">New</span>\n                </h6>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst ContexualBadges = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Contexual variations</h4>\n                <p className=\"text-muted font-14 mb-3\">\n                    Add any of the below mentioned modifier classes to change the appearance of a badge. Badge can be\n                    more contextual as well. Just use regular convention e.g. <code>badge-*color</code>,\n                    <code>bg-primary</code> to have badge with different background.\n                </p>\n\n                {colors.map((color, index) => {\n                    return (\n                        <Badge\n                            className={classNames(\n                                'me-1',\n                                'bg-' + color.color,\n                                color.color === 'light' ? 'text-dark' : null\n                            )}\n                            key={index}>\n                            {color.name}\n                        </Badge>\n                    );\n                })}\n\n                <h5 className=\"mt-4\">Lighten Badges</h5>\n                <p className=\"text-muted font-14 mb-3\">\n                    Using the <code>.badge-*-lighten</code> modifier class, you can have more soften variation.\n                </p>\n\n                {colors.map((color, index) => {\n                    return (\n                        <Badge bg=\"\" className={classNames('me-1', 'badge-' + color.color + '-lighten')} key={index}>\n                            {color.name}\n                        </Badge>\n                    );\n                })}\n\n                <h5 className=\"mt-4\">Outline Badges</h5>\n                <p className=\"text-muted font-14 mb-3\">\n                    Using the <code>.badge-outline-*</code> to quickly create a bordered badges.\n                </p>\n\n                {colors.map((color, index) => {\n                    return (\n                        <Badge bg=\"\" className={classNames('me-1', 'badge-outline-' + color.color)} key={index}>\n                            {color.name}\n                        </Badge>\n                    );\n                })}\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst PillBadges = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Pill Badges</h4>\n                <p className=\"text-muted font-14 mb-3\">\n                    Use the <code>.rounded-pill</code> modifier class to make badges more rounded.\n                </p>\n\n                {colors.map((color, index) => {\n                    return (\n                        <Badge\n                            pill\n                            className={classNames(\n                                'me-1',\n                                'bg-' + color.color,\n                                color.color === 'light' ? 'text-dark' : null\n                            )}\n                            key={index}>\n                            {color.name}\n                        </Badge>\n                    );\n                })}\n\n                <h5 className=\"mt-4\">Lighten Badges</h5>\n                <p className=\"text-muted font-14 mb-3\">\n                    Use the <code>.badge-*-lighten</code> modifier class to make badges lighten.\n                </p>\n\n                {colors.map((color, index) => {\n                    return (\n                        <Badge\n                            bg=\"\"\n                            pill\n                            className={classNames('me-1', 'badge-' + color.color + '-lighten')}\n                            key={index}>\n                            {color.name}\n                        </Badge>\n                    );\n                })}\n\n                <h5 className=\"mt-4\">Outline Badges</h5>\n                <p className=\"text-muted font-14 mb-3\">\n                    Using the <code>.badge-outline-*</code> to quickly create a bordered badges.\n                </p>\n\n                {colors.map((color, index) => {\n                    return (\n                        <Badge bg=\"\" pill className={classNames('me-1', 'badge-outline-' + color.color)} key={index}>\n                            {color.name}\n                        </Badge>\n                    );\n                })}\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst BadgePosition = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Badge Positioned</h4>\n                <p className=\"text-muted font-14 mb-3\">\n                    Use utilities to modify a <code>.badge</code> and position it in the corner of a link or button.\n                </p>\n\n                <Row>\n                    <Col className=\"col-6\">\n                        <Button variant=\"primary\" className=\"position-relative\">\n                            Inbox\n                            <span className=\"position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger\">\n                                99+\n                                <span className=\"visually-hidden\">unread messages</span>\n                            </span>\n                        </Button>\n                    </Col>\n                    <Col className=\"col-6\">\n                        <Button variant=\"primary\" className=\"position-relative\">\n                            Profile\n                            <span className=\"position-absolute top-0 start-100 translate-middle p-1 bg-danger border border-light rounded-circle\">\n                                <span className=\"visually-hidden\">New alerts</span>\n                            </span>\n                        </Button>\n                    </Col>\n                    <Col className=\"col-6\">\n                        <Button variant=\"success\" className=\"mt-4\">\n                            Notifications <span className=\"badge bg-light text-dark ms-1\">4</span>\n                        </Button>\n                    </Col>\n                </Row>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst Badges = (): React$Element<React$FragmentType> => {\n    return (\n        <>\n            <PageTitle\n                breadCrumbItems={[\n                    { label: 'Base UI', path: '/ui/badges' },\n                    { label: 'Badges', path: '/ui/badges', active: true },\n                ]}\n                title={'Badges'}\n            />\n\n            <Row>\n                <Col xl={6}>\n                    <DefaultBadges />\n                    <PillBadges />\n                </Col>\n\n                <Col xl={6}>\n                    <ContexualBadges />\n                    <BadgePosition />\n                </Col>\n            </Row>\n        </>\n    );\n};\n\nexport default Badges;\n"],"sourceRoot":""}