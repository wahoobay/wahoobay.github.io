import cx from 'classnames';
import React from 'react';
import Hint from '../Hint';
import Input from '../Input';
import { isSelectable } from '../../utils';
import withClassNames from '../../behaviors/classNames';
class TypeaheadInputMulti extends React.Component {
    wrapperRef = React.createRef();
    _input = null;
    render() {
        const { children, className, inputClassName, inputRef, placeholder, referenceElementRef, selected, ...props } = this.props;
        return (React.createElement("div", { className: cx('rbt-input-multi', className), onClick: this._handleContainerClickOrFocus, onFocus: this._handleContainerClickOrFocus, ref: referenceElementRef, tabIndex: -1 },
            React.createElement("div", { className: "rbt-input-wrapper", ref: this.wrapperRef },
                children,
                React.createElement(Hint, null,
                    React.createElement(Input, { ...props, className: inputClassName, onKeyDown: this._handleKeyDown, placeholder: selected.length ? '' : placeholder, ref: this.getInputRef, style: {
                            backgroundColor: 'transparent',
                            border: 0,
                            boxShadow: 'none',
                            cursor: 'inherit',
                            outline: 'none',
                            padding: 0,
                            width: '100%',
                            zIndex: 1,
                        } })))));
    }
    getInputRef = (input) => {
        this._input = input;
        this.props.inputRef(input);
    };
    _handleContainerClickOrFocus = (e) => {
        if (this.props.disabled) {
            e.currentTarget.blur();
            return;
        }
        const inputNode = this._input;
        if (!inputNode ||
            (e.currentTarget.contains(e.target) &&
                e.currentTarget !== e.target)) {
            return;
        }
        if (isSelectable(inputNode)) {
            inputNode.selectionStart = inputNode.value.length;
        }
        inputNode.focus();
    };
    _handleKeyDown = (e) => {
        const { onKeyDown, selected, value } = this.props;
        if (e.key === 'Backspace' && selected.length && !value) {
            e.preventDefault();
            if (this.wrapperRef.current) {
                const { children } = this.wrapperRef.current;
                const lastToken = children[children.length - 2];
                lastToken && lastToken.focus();
            }
        }
        onKeyDown && onKeyDown(e);
    };
}
export default withClassNames(TypeaheadInputMulti);
