"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _defaultFilterBy = _interopRequireDefault(require("./defaultFilterBy"));

var _data = _interopRequireDefault(require("../tests/data"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var FILTERED_RESULTS = [
/* eslint-disable sort-keys */
{
  name: 'California',
  population: 37254503,
  capital: 'Sacramento',
  region: 'West'
}, {
  name: 'North Carolina',
  population: 9535692,
  capital: 'Raleigh',
  region: 'South'
}, {
  name: 'South Carolina',
  population: 4625401,
  capital: 'Columbia',
  region: 'South'
}
/* eslint-enable sort-keys */
];
describe('defaultFilterBy', function () {
  var options, props;
  beforeEach(function () {
    options = _data["default"];
    props = {
      caseSensitive: false,
      filterBy: [],
      ignoreDiacritics: true,
      labelKey: 'name',
      multiple: false,
      selected: [],
      text: 'Ca'
    };
  });
  it('filters an array of objects', function () {
    var results = options.filter(function (o) {
      return (0, _defaultFilterBy["default"])(o, props);
    });
    expect(results).toEqual(FILTERED_RESULTS);
  });
  describe('when `labelKey` is a function', function () {
    beforeEach(function () {
      props = _objectSpread(_objectSpread({}, props), {}, {
        labelKey: function labelKey(o) {
          return o.name;
        }
      });
    });
    it('returns a set of results', function () {
      var results = options.filter(function (o) {
        return (0, _defaultFilterBy["default"])(o, props);
      });
      expect(results).toEqual(FILTERED_RESULTS);
    });
    it("returns no results if the text doesn't find a match", function () {
      props = _objectSpread(_objectSpread({}, props), {}, {
        text: 'zzz'
      });
      var results = options.filter(function (o) {
        return (0, _defaultFilterBy["default"])(o, props);
      });
      expect(results.length).toBe(0);
    });
  });
  it('returns case-sensitive filtered results', function () {
    props = _objectSpread(_objectSpread({}, props), {}, {
      caseSensitive: true,
      text: 'alab'
    });
    var results = options.filter(function (o) {
      return (0, _defaultFilterBy["default"])(o, props);
    });
    expect(results.length).toBe(0);
  });
  it('filters based on a set of fields and returns results', function () {
    props = _objectSpread(_objectSpread({}, props), {}, {
      filterBy: ['name', 'capital'],
      text: 'sacr'
    });
    var results = options.filter(function (o) {
      return (0, _defaultFilterBy["default"])(o, props);
    });
    expect(results).toEqual(FILTERED_RESULTS.slice(0, 1));
  });
  it('filters an array of strings', function () {
    var stringOptions = options.map(function (o) {
      return o.name;
    });
    var results = stringOptions.filter(function (o) {
      return (0, _defaultFilterBy["default"])(o, props);
    });
    expect(results).toEqual(['California', 'North Carolina', 'South Carolina']);
  });
  it("returns no results if the text doesn't find a match", function () {
    props = _objectSpread(_objectSpread({}, props), {}, {
      text: 'zzz'
    });
    var results = options.filter(function (o) {
      return (0, _defaultFilterBy["default"])(o, props);
    });
    expect(results.length).toBe(0);
  });
  it('returns the option if the text matches exactly', function () {
    props = _objectSpread(_objectSpread({}, props), {}, {
      text: 'California'
    });
    var results = options.filter(function (o) {
      return (0, _defaultFilterBy["default"])(o, props);
    });
    expect(results.length).toBe(1);
    expect(results[0][props.labelKey]).toBe(props.text);
  });
  it('returns no results if `multiple=true` and the text only matches ' + 'selected results', function () {
    props = _objectSpread(_objectSpread({}, props), {}, {
      multiple: true,
      selected: [options[4]],
      text: 'cali'
    });
    var results = options.filter(function (o) {
      return (0, _defaultFilterBy["default"])(o, props);
    });
    expect(results.length).toBe(0);
  });
  describe('behavior with diacritical marks', function () {
    beforeEach(function () {
      options = ['Español', 'Français'];
      props = _objectSpread(_objectSpread({}, props), {}, {
        text: 'franc'
      });
    });
    it('ignores diacritical marks when filtering', function () {
      var results = options.filter(function (o) {
        return (0, _defaultFilterBy["default"])(o, props);
      });
      expect(results).toEqual(['Français']);
    });
    it('considers diacritical marks when filtering', function () {
      props = _objectSpread(_objectSpread({}, props), {}, {
        ignoreDiacritics: false
      });
      var results = options.filter(function (o) {
        return (0, _defaultFilterBy["default"])(o, props);
      });
      expect(results.length).toBe(0);
    });
  });
  it('gracefully handles invalid labels', function () {
    var spy = jest.spyOn(console, 'error');
    options = [{
      name: 'foo'
    }];
    props = _objectSpread(_objectSpread({}, props), {}, {
      labelKey: 'label'
    });
    var results = options.filter(function (o) {
      return (0, _defaultFilterBy["default"])(o, props);
    });
    expect(spy).toHaveBeenCalledTimes(1);
    expect(results.length).toBe(0);
    spy.mockRestore();
  });
});