"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _getIsOnlyResult = _interopRequireDefault(require("./getIsOnlyResult"));

describe('getIsOnlyResult', function () {
  var props;
  beforeEach(function () {
    props = {
      allowNew: false,
      highlightOnlyResult: true,
      results: ['The only result!']
    };
  });
  it('returns true when there is only one result', function () {
    expect((0, _getIsOnlyResult["default"])(props)).toBe(true);
  });
  it('returns false when `highlightOnlyResult` is disabled', function () {
    props.highlightOnlyResult = false;
    expect((0, _getIsOnlyResult["default"])(props)).toBe(false);
  });
  it('returns false when custom options are allowed', function () {
    props.allowNew = true;
    expect((0, _getIsOnlyResult["default"])(props)).toBe(false);
  });
  it('returns false when there are more or less than one result', function () {
    props.results = ['One', 'Two'];
    expect((0, _getIsOnlyResult["default"])(props)).toBe(false);
    props.results = [];
    expect((0, _getIsOnlyResult["default"])(props)).toBe(false);
  });
  it('returns false when the only result is disabled', function () {
    props.results = [{
      disabled: true
    }];
    expect((0, _getIsOnlyResult["default"])(props)).toBe(false);
  });
});