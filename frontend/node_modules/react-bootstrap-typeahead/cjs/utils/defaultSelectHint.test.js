"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _defaultSelectHint = _interopRequireDefault(require("./defaultSelectHint"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

describe('defaultSelectHint', function () {
  var event, preventDefault;
  beforeEach(function () {
    preventDefault = jest.fn();
    event = {
      currentTarget: {
        value: 'Cali'
      },
      key: 'Tab',
      preventDefault: preventDefault
    };
  });
  it('returns true when tab is pressed', function () {
    expect((0, _defaultSelectHint["default"])(event)).toBe(true);
    expect(preventDefault).toHaveBeenCalledTimes(1);
  });
  it('checks hinting behavior when the right arrow key is pressed', function () {
    event = _objectSpread(_objectSpread({}, event), {}, {
      key: 'ArrowRight'
    });
    event.currentTarget.selectionStart = 3;
    expect((0, _defaultSelectHint["default"])(event)).toBe(false);
    event.currentTarget.selectionStart = 4;
    expect((0, _defaultSelectHint["default"])(event)).toBe(true);
    event.currentTarget.selectionStart = null;
    expect((0, _defaultSelectHint["default"])(event)).toBe(true);
  });
  it('returns false for other keys', function () {
    // Build up a set of valid keys.
    [].concat(['ArrowUp', 'ArrowRight', 'ArrowDown', 'ArrowLeft']).concat('0123456789'.split('')).concat('abcdefghijqlmnopqrstuvwxyz'.split('')) // Letter keys
    .concat(['Backspace', ' ', 'Escape', 'Enter', 'Tab']).concat(';=,-./`'.split('')).concat("[\\]'".split('')).filter(function (key) {
      return key !== 'Enter' && key !== 'ArrowRight' && key !== 'Tab';
    }).forEach(function (key) {
      event.key = key;
      expect((0, _defaultSelectHint["default"])(event)).toBe(false);
    });
  });
  it('accepts a callback for custom behaviors', function () {
    event = _objectSpread(_objectSpread({}, event), {}, {
      key: 'Enter'
    });

    var selectHint = function selectHint(shouldSelectHint, e) {
      return e.key === 'Enter' || shouldSelectHint;
    };

    expect((0, _defaultSelectHint["default"])(event, selectHint)).toBe(true);
  });
});