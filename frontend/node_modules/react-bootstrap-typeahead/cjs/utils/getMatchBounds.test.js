"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");

var _getMatchBounds = _interopRequireWildcard(require("./getMatchBounds"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

describe('getMatchBounds', function () {
  it('handles a normal string', function () {
    var bounds = (0, _getMatchBounds["default"])('This is a string.', 'This is');
    expect(bounds.start).toBe(0);
    expect(bounds.end).toBe(7);
  });
  it('returns null when there is no match', function () {
    expect((0, _getMatchBounds["default"])('foo', 'bar')).toBe(null);
  });
  it('is case-insensitive', function () {
    var bounds = (0, _getMatchBounds["default"])('This String Has Caps.', 'string has');
    expect(bounds.start).toBe(5);
    expect(bounds.end).toBe(15);
  });
  it('handles diacritical marks in the search string', function () {
    var bounds = (0, _getMatchBounds["default"])('Schön ist, was schön lässt.', 'schö');
    expect(bounds.start).toBe(0);
    expect(bounds.end).toBe(4);
  });
  it('matches composed diacritical marks', function () {
    var bounds = (0, _getMatchBounds["default"])('Schön ist, was schön lässt.', 'was schon');
    expect(bounds.start).toBe(11);
    expect(bounds.end).toBe(20);
  });
  it('matches combined diacritical marks', function () {
    var bounds = (0, _getMatchBounds["default"])("Scho\u0308n ist, was scho\u0308n la\u0308sst.", 'was schon');
    expect(bounds.start).toBe(12);
    expect(bounds.end).toBe(22);
  });
});
describe('escapeStringRegexp', function () {
  it('tests string escaping', function () {
    expect((0, _getMatchBounds.escapeStringRegexp)('\\ ^ $ * + ? . ( ) | { } [ ]')).toBe('\\\\ \\^ \\$ \\* \\+ \\? \\. \\( \\) \\| \\{ \\} \\[ \\]');
  });
  it('escapes `-` in a way compatible with PCRE', function () {
    expect((0, _getMatchBounds.escapeStringRegexp)('foo - bar')).toBe('foo \\x2d bar');
  });
});