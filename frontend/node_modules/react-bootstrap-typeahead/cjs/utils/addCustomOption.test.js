"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _addCustomOption = _interopRequireDefault(require("./addCustomOption"));

var _data = _interopRequireDefault(require("../tests/data"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

describe('addCustomOption', function () {
  var defaultProps, labelKey;
  beforeEach(function () {
    labelKey = 'name';
    defaultProps = {
      allowNew: true,
      labelKey: labelKey,
      text: 'zzz'
    };
  });
  it('does not add a custom option when `allowNew` is false', function () {
    var props = _objectSpread(_objectSpread({}, defaultProps), {}, {
      allowNew: false
    });

    expect((0, _addCustomOption["default"])(_data["default"], props)).toBe(false);
  });
  it('does not add a custom option when no text is entered', function () {
    var props = _objectSpread(_objectSpread({}, defaultProps), {}, {
      text: ''
    });

    expect((0, _addCustomOption["default"])(_data["default"], props)).toBe(false);
  });
  it('adds a custom option if no matches are found', function () {
    expect((0, _addCustomOption["default"])(_data["default"], defaultProps)).toBe(true);
  });
  it('adds a custom option when `labelKey` is a function', function () {
    var props = _objectSpread(_objectSpread({}, defaultProps), {}, {
      labelKey: function labelKey(o) {
        return o.name;
      }
    });

    expect((0, _addCustomOption["default"])(_data["default"], props)).toBe(true);
  });
  it('adds a custom option when no exact matches are found', function () {
    var props = _objectSpread(_objectSpread({}, defaultProps), {}, {
      text: 'Ala'
    });

    expect((0, _addCustomOption["default"])(_data["default"], props)).toBe(true);
  });
  it('does not add a custom option when an exact match is found', function () {
    var props = _objectSpread(_objectSpread({}, defaultProps), {}, {
      text: 'Wyoming'
    });

    expect((0, _addCustomOption["default"])(_data["default"], props)).toBe(false);
  });
  it('adds a custom option when `allowNew` returns true', function () {
    var props = _objectSpread(_objectSpread({}, defaultProps), {}, {
      allowNew: function allowNew() {
        return true;
      },
      text: 'North Carolina' // Would otherwise return false

    });

    expect((0, _addCustomOption["default"])(_data["default"], props)).toBe(true);
  });
  it('does not add a custom option when `allowNew` returns false', function () {
    var props = _objectSpread(_objectSpread({}, defaultProps), {}, {
      allowNew: function allowNew() {
        return false;
      },
      text: 'xxx' // Would otherwise return true

    });

    expect((0, _addCustomOption["default"])(_data["default"], props)).toBe(false);
  });
});