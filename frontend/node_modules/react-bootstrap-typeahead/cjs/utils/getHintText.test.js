"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _getHintText = _interopRequireDefault(require("./getHintText"));

var _data = _interopRequireDefault(require("../tests/data"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var props = {
  activeIndex: -1,
  activeItem: null,
  initialItem: {
    name: 'Alabama'
  },
  isFocused: true,
  isMenuShown: true,
  labelKey: 'name',
  minLength: 0,
  multiple: false,
  selected: [],
  text: 'alA'
};
describe('getHintText', function () {
  it('returns a case-sensitive hint string', function () {
    var hintText = (0, _getHintText["default"])(props);
    expect(hintText).toBe('alAbama');
  });
  it('returns an empty string when the text is empty', function () {
    var hintText = (0, _getHintText["default"])(_objectSpread(_objectSpread({}, props), {}, {
      text: ''
    }));
    expect(hintText).toBe('');
  });
  it('returns an empty string when the menu is not focused', function () {
    var hintText = (0, _getHintText["default"])(_objectSpread(_objectSpread({}, props), {}, {
      isFocused: false
    }));
    expect(hintText).toBe('');
  });
  it('returns an empty string when a menu item is active', function () {
    var hintText = (0, _getHintText["default"])(_objectSpread(_objectSpread({}, props), {}, {
      activeIndex: 0
    }));
    expect(hintText).toBe('');
  });
  it('returns an empty string when there is a selection', function () {
    var hintText = (0, _getHintText["default"])(_objectSpread(_objectSpread({}, props), {}, {
      selected: [_data["default"][0]]
    }));
    expect(hintText).toBe('');
  });
  it('returns an empty string when the menu is hidden', function () {
    var hintText = (0, _getHintText["default"])(_objectSpread(_objectSpread({}, props), {}, {
      isMenuShown: false
    }));
    expect(hintText).toBe('');
  });
  it('returns an empty string when the initial item does not begin with the ' + 'input string', function () {
    var hintText = (0, _getHintText["default"])(_objectSpread(_objectSpread({}, props), {}, {
      text: 'Cal'
    }));
    expect(hintText).toBe('');
  });
  it('returns an empty string when the initial item is a custom option', function () {
    var initialItem = _objectSpread(_objectSpread({}, props.initialItem), {}, {
      customOption: true
    });

    var hintText = (0, _getHintText["default"])(_objectSpread(_objectSpread({}, props), {}, {
      initialItem: initialItem
    }));
    expect(hintText).toBe('');
  });
  it('handles string with composed diacritical marks', function () {
    var hintText = (0, _getHintText["default"])(_objectSpread(_objectSpread({}, props), {}, {
      initialItem: 'Schön ist, was schön lässt.',
      text: 'schon is'
    }));
    expect(hintText).toBe('schon ist, was schön lässt.');
  });
  it('handles string with combined diacritical marks', function () {
    var hintText = (0, _getHintText["default"])(_objectSpread(_objectSpread({}, props), {}, {
      initialItem: "Scho\u0308n ist, was scho\u0308n la\u0308sst.",
      text: 'schon is'
    }));
    expect(hintText).toBe("schon ist, was scho\u0308n la\u0308sst.");
  });
});