"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

var _react = _interopRequireDefault(require("react"));

var stories = _interopRequireWildcard(require("./Token.stories"));

var _helpers = require("../../tests/helpers");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var ACTIVE_CLASS = 'rbt-token-active';
var DISABLED_CLASS = 'rbt-token-disabled';
var REMOVEABLE_CLASS = 'rbt-token-removeable';

var _composeStories = (0, _helpers.composeStories)(stories),
    Anchor = _composeStories.Anchor,
    Disabled = _composeStories.Disabled,
    Interactive = _composeStories.Interactive,
    Static = _composeStories.Static;

describe('<Token>', function () {
  (0, _helpers.generateSnapshots)(stories);
  it('renders non-removeable tokens', function () {
    (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(Static, null), /*#__PURE__*/_react["default"].createElement(Anchor, null), /*#__PURE__*/_react["default"].createElement(Disabled, null)));
    expect(_helpers.screen.queryAllByRole('button').length).toBe(0);
  });
  it('renders a removeable token', function () {
    var onRemove = jest.fn();

    var _render = (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Interactive, {
      onRemove: onRemove
    })),
        container = _render.container;

    var token = container.firstChild;
    expect(token).toHaveClass(REMOVEABLE_CLASS);

    var closeButton = _helpers.screen.getByRole('button');

    _helpers.userEvent.click(closeButton);

    expect(onRemove).toHaveBeenCalledTimes(1);
  });
  it('makes disabled tokens non-interactive', function () {
    var _render2 = (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Disabled, {
      href: "/path/to/some/url"
    })),
        container = _render2.container;

    var token = container.firstChild;
    expect(token.tagName).toBe('DIV');
    expect(token).not.toHaveAttribute('href');
    expect(token).toHaveClass(DISABLED_CLASS);
  });
  it('handles events', function () {
    var onBlur = jest.fn();
    var onClick = jest.fn();
    var onFocus = jest.fn();
    var onRemove = jest.fn();

    var _render3 = (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Interactive, {
      onBlur: onBlur,
      onClick: onClick,
      onFocus: onFocus,
      onRemove: onRemove
    })),
        container = _render3.container;

    var token = container.firstChild;
    expect(token).not.toHaveClass(ACTIVE_CLASS);
    token.focus();
    expect(onFocus).toHaveBeenCalledTimes(1);
    expect(token).toHaveClass(ACTIVE_CLASS);
    token.blur();
    expect(onBlur).toHaveBeenCalledTimes(1);
    expect(token).not.toHaveClass(ACTIVE_CLASS);

    _helpers.userEvent.click(token);

    expect(onClick).toHaveBeenCalledTimes(1);
    expect(onFocus).toHaveBeenCalledTimes(2);
    expect(token).toHaveClass(ACTIVE_CLASS); // `onRemove` called only when token is active/focused.

    token.blur();

    _helpers.userEvent.keyboard('{backspace}');

    expect(onRemove).toHaveBeenCalledTimes(0);
    token.focus();

    _helpers.userEvent.keyboard('{backspace}');

    expect(onRemove).toHaveBeenCalledTimes(1); // Other events are ignored.

    _helpers.userEvent.keyboard('{enter}');

    expect(onRemove).toHaveBeenCalledTimes(1);
  });
});