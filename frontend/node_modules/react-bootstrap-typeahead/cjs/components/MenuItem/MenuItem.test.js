"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

var _react = _interopRequireDefault(require("react"));

var baseStories = _interopRequireWildcard(require("./BaseMenuItem.stories"));

var stories = _interopRequireWildcard(require("./MenuItem.stories"));

var _helpers = require("../../tests/helpers");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var _composeStories = (0, _helpers.composeStories)(baseStories),
    BaseDefault = _composeStories.Default,
    Active = _composeStories.Active,
    Disabled = _composeStories.Disabled;

var _composeStories2 = (0, _helpers.composeStories)(stories),
    Default = _composeStories2.Default;

describe('<BaseMenuItem>', function () {
  (0, _helpers.generateSnapshots)(baseStories);
  it('triggers an event when clicked', function () {
    var onClick = jest.fn();
    (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(BaseDefault, {
      onClick: onClick
    }));

    var item = _helpers.screen.getByRole('link');

    _helpers.userEvent.click(item);

    expect(onClick).toHaveBeenCalledTimes(1);
  });
  it('renders a default href', function () {
    (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(BaseDefault, null));
    expect(_helpers.screen.getByRole('link')).toHaveAttribute('href', '#');
  });
  it('renders an href passed to the MenuItem', function () {
    var href = '/some/link';
    (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(BaseDefault, {
      href: href
    }));
    expect(_helpers.screen.getByRole('link')).toHaveAttribute('href', href);
  });
  it('renders an active base menu item', function () {
    (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Active, null));
    expect(_helpers.screen.getByRole('link')).toHaveClass('active');
  });
  it('renders a disabled base menu item', function () {
    var onClick = jest.fn();
    (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Disabled, {
      disabled: true,
      onClick: onClick
    }));

    var item = _helpers.screen.getByRole('link');

    _helpers.userEvent.click(item);

    expect(item).toHaveClass('disabled');
    expect(onClick).toHaveBeenCalledTimes(0);
  });
});
describe('<MenuItem>', function () {
  (0, _helpers.generateSnapshots)(stories);
  it('renders a MenuItem', function () {
    (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, null));

    var option = _helpers.screen.getByRole('option');

    expect(option).toHaveAttribute('aria-label', 'test label');
    expect(option).toHaveAttribute('aria-selected', 'false');
    expect(option).toHaveAttribute('id', 'test-id-item-0');
  });
  it('conditionally calls `onInitialItemChange`', function () {
    var onInitialItemChange = jest.fn();
    var context = {
      onInitialItemChange: onInitialItemChange
    };

    var _render = (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, {
      context: context,
      props: {
        position: 1
      }
    })),
        rerender = _render.rerender;

    expect(onInitialItemChange).toHaveBeenCalledTimes(0);
    rerender( /*#__PURE__*/_react["default"].createElement(Default, {
      context: context,
      props: {
        position: 0
      }
    }));
    expect(onInitialItemChange).toHaveBeenCalledTimes(1);
  });
  it('conditionally calls `onInitialItemChange`', function () {
    var onActiveItemChange = jest.fn();
    var context = {
      activeIndex: 1,
      onActiveItemChange: onActiveItemChange
    };

    var _render2 = (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, {
      context: context,
      props: {
        position: 0
      }
    })),
        rerender = _render2.rerender;

    expect(onActiveItemChange).toHaveBeenCalledTimes(0);
    rerender( /*#__PURE__*/_react["default"].createElement(Default, {
      context: context,
      props: {
        position: 1
      }
    }));
    expect(onActiveItemChange).toHaveBeenCalledTimes(1);
  });
  it('changes the active state of the menu item', function () {
    (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, {
      context: {
        activeIndex: 0
      }
    }));

    var option = _helpers.screen.getByRole('option');

    expect(option).toHaveClass('active');
    expect(option).toHaveAttribute('aria-selected', 'true');
  });
  it('sets the active state if it is the only result', function () {
    (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, {
      context: {
        isOnlyResult: true
      }
    }));

    var option = _helpers.screen.getByRole('option');

    expect(option).toHaveClass('active');
    expect(option).toHaveAttribute('aria-selected', 'true');
  });
  it('calls the click handlers', function () {
    var onClick = jest.fn();
    var onMenuItemClick = jest.fn();
    (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, {
      context: {
        onMenuItemClick: onMenuItemClick
      },
      props: {
        onClick: onClick
      }
    }));

    _helpers.userEvent.click(_helpers.screen.getByRole('option'));

    expect(onClick).toHaveBeenCalledTimes(1);
    expect(onMenuItemClick).toHaveBeenCalledTimes(1);
  });
  it('renders a disabled menu item', function () {
    var onClick = jest.fn();
    (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, {
      props: {
        disabled: true,
        onClick: onClick
      }
    }));

    var item = _helpers.screen.getByRole('option');

    _helpers.userEvent.click(item);

    expect(item).toHaveClass('disabled');
    expect(onClick).toHaveBeenCalledTimes(0);
  });
});