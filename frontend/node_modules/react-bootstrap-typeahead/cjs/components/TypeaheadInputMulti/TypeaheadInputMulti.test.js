"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

var _react = _interopRequireDefault(require("react"));

var stories = _interopRequireWildcard(require("./TypeaheadInputMulti.stories"));

var _helpers = require("../../tests/helpers");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var _composeStories = (0, _helpers.composeStories)(stories),
    Default = _composeStories.Default,
    Disabled = _composeStories.Disabled;

describe('<TypeaheadInputMulti>', function () {
  (0, _helpers.generateSnapshots)(stories);
  it('renders a multi-select input with tokens', function () {
    var _render = (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, null)),
        container = _render.container; // Find the token close buttons as a proxy for the token itself.


    expect((0, _helpers.getTokens)(container)).toHaveLength(3);
  });
  it('focuses the input', function () {
    var _render2 = (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, null)),
        container = _render2.container; // Test clicking the container, which forwards the click to the input.


    _helpers.userEvent.click(container.firstElementChild);

    expect((0, _helpers.getInput)()).toHaveFocus();
  });
  it('does not focus a disabled input', function () {
    var _render3 = (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Disabled, null)),
        container = _render3.container;

    var input = (0, _helpers.getInput)();
    expect(input).toBeDisabled(); // Test clicking the container, which forwards the click to the input.

    _helpers.userEvent.click(container.firstElementChild);

    expect(input).not.toHaveFocus();

    _helpers.userEvent.click(input);

    expect(input).not.toHaveFocus();
  });
  it('prevents clicks on the input from bubbling', function () {
    var onClick = jest.fn();
    (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, {
      onClick: onClick,
      value: "calif"
    }));
    var input = (0, _helpers.getInput)();
    input.focus();
    input.selectionStart = 2; // userEvent.click triggers the wrong behavior for some reason.

    _helpers.fireEvent.click(input); // Cursor shouldn't move when the input is clicked once.


    expect(onClick).toHaveBeenCalledTimes(1);
    expect(input.selectionStart).toBe(2);
  });
  it('calls the keydown handler', function () {
    var onKeyDown = jest.fn();
    (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, {
      onKeyDown: onKeyDown
    }));
    (0, _helpers.getInput)().focus();

    _helpers.userEvent.keyboard('{enter}');

    expect(onKeyDown).toHaveBeenCalledTimes(1);
  });
  it('focuses the last token', function () {
    var _render4 = (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, null)),
        container = _render4.container;

    (0, _helpers.getInput)().focus();

    _helpers.userEvent.keyboard('{backspace}');

    var tokens = (0, _helpers.getTokens)(container);
    var lastToken = tokens[tokens.length - 1];
    expect(lastToken).toHaveFocus();
  });
  it('does not focus the last token when the input has a value', function () {
    (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, {
      value: "foo"
    }));
    var input = (0, _helpers.getInput)();
    input.focus();

    _helpers.userEvent.keyboard('{backspace}');

    expect(input).toHaveFocus();
  });
});