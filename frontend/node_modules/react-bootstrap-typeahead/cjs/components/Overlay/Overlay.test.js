"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _react = _interopRequireDefault(require("react"));

var _Overlay = require("./Overlay");

var stories = _interopRequireWildcard(require("./Overlay.stories"));

var _helpers = require("../../tests/helpers");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var _composeStories = (0, _helpers.composeStories)(stories),
    Default = _composeStories.Default;

describe('<Overlay>', function () {
  (0, _helpers.generateSnapshots)(stories);
  it('renders the overlay', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, null));
            _context.next = 3;
            return (0, _helpers.waitFor)(function () {
              expect((0, _helpers.getMenu)()).toBeInTheDocument();
            });

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })));
  it('does not render the overlay when `isMenuShown=false`', function () {
    (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, {
      isMenuShown: false
    }));
    expect(_helpers.screen.queryByRole('listbox')).not.toBeInTheDocument();
  });
  it('updates the positioning type', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2() {
    var _render, rerender;

    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            // The story uses fixed positioning by default.
            _render = (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, null)), rerender = _render.rerender;
            _context2.next = 3;
            return (0, _helpers.waitFor)(function () {
              expect((0, _helpers.getMenu)()).toHaveStyle('position: fixed');
            });

          case 3:
            rerender( /*#__PURE__*/_react["default"].createElement(Default, {
              positionFixed: false
            }));
            _context2.next = 6;
            return (0, _helpers.waitFor)(function () {
              expect((0, _helpers.getMenu)()).toHaveStyle('position: absolute');
            });

          case 6:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  })));
});
describe('Overlay placement', function () {
  it('computes the placement string', function () {
    var permutations = [{
      props: {
        align: 'right',
        dropup: false
      },
      received: 'bottom-end'
    }, {
      props: {
        align: 'left',
        dropup: false
      },
      received: 'bottom-start'
    }, {
      props: {
        align: 'justify',
        dropup: false
      },
      received: 'bottom-start'
    }, {
      props: {
        align: 'foo',
        dropup: false
      },
      received: 'bottom-start'
    }, {
      props: {
        align: 'right',
        dropup: true
      },
      received: 'top-end'
    }, {
      props: {
        align: 'left',
        dropup: true
      },
      received: 'top-start'
    }, {
      props: {
        align: 'justify',
        dropup: true
      },
      received: 'top-start'
    }, {
      props: {
        align: 'foo',
        dropup: true
      },
      received: 'top-start'
    }];
    permutations.forEach(function (_ref3) {
      var props = _ref3.props,
          received = _ref3.received;
      expect((0, _Overlay.getPlacement)(props)).toBe(received);
    });
  });
});
describe('Overlay modifiers', function () {
  it('sets the `flip` modifier', function () {
    var props = {
      align: 'justify',
      flip: false
    };

    var selector = function selector(_ref4) {
      var name = _ref4.name;
      return name === 'flip';
    };

    expect((0, _Overlay.getModifiers)(props).find(selector).enabled).toBe(false);
    props.flip = true;
    expect((0, _Overlay.getModifiers)(props).find(selector).enabled).toBe(true);
  });
  it('conditionally adds the `setWidth` modifier', function () {
    var props = {
      align: 'justify',
      flip: false
    };
    var modifiers = (0, _Overlay.getModifiers)(props);
    expect(modifiers).toHaveLength(2);
    expect(modifiers.find(function (_ref5) {
      var name = _ref5.name;
      return name === 'setPopperWidth';
    })).toBeTruthy();
    props.align = 'left';
    expect((0, _Overlay.getModifiers)(props)).toHaveLength(1);
    props.align = 'right';
    expect((0, _Overlay.getModifiers)(props)).toHaveLength(1);
  });
});