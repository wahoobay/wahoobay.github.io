"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof3 = require("@babel/runtime/helpers/typeof");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _Typeahead = _interopRequireDefault(require("./Typeahead"));

var _Typeahead2 = require("../../core/Typeahead");

var stories = _interopRequireWildcard(require("./Typeahead.stories"));

var _helpers = require("../../tests/helpers");

var _data = _interopRequireDefault(require("../../tests/data"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var ID = 'rbt-id';
var TestComponent = /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
  return /*#__PURE__*/_react["default"].createElement(_Typeahead["default"], (0, _extends2["default"])({
    id: ID,
    labelKey: "name",
    onChange: _helpers.noop,
    options: _data["default"],
    ref: ref
  }, props));
});

var _composeStories = (0, _helpers.composeStories)(stories),
    Default = _composeStories.Default,
    MultiSelect = _composeStories.MultiSelect,
    ClearButton = _composeStories.ClearButton,
    Pagination = _composeStories.Pagination,
    AllowNew = _composeStories.AllowNew,
    CustomMenu = _composeStories.CustomMenu,
    Controlled = _composeStories.Controlled;

describe('<Typeahead>', function () {
  (0, _helpers.generateSnapshots)(stories);
  it('auto-focuses the typeahead input', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, {
              autoFocus: true
            }));
            _context.next = 3;
            return (0, _helpers.waitFor)(function () {
              expect((0, _helpers.getInput)()).toHaveFocus();
            });

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })));
  it('sets and unsets the focus state on focus/blur', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2() {
    var input;
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, null));
            input = (0, _helpers.getInput)();
            expect(input).not.toHaveFocus();
            input.focus();
            _context2.next = 6;
            return (0, _helpers.waitFor)(function () {
              expect(input).toHaveFocus();
            });

          case 6:
            input.blur();
            expect(input).not.toHaveFocus();

          case 8:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  })));
  describe('input focus', function () {
    afterEach(function () {
      // The menu should close but the input stays focused.
      expect((0, _helpers.getMenu)()).not.toBeInTheDocument();
      expect((0, _helpers.getInput)()).toHaveFocus();
    });
    it('maintains focus when clicking a menu item', function () {
      (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, null));
      var input = (0, _helpers.getInput)();
      input.focus();

      _helpers.userEvent.click((0, _helpers.getItems)()[0]);
    });
    it('maintains focus when clicking the clear button', function () {
      (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(ClearButton, null));
      var input = (0, _helpers.getInput)();
      input.focus(); // Click the close button

      _helpers.userEvent.click(_helpers.screen.getByRole('button'));
    });
  });
  it('truncates selections when using `defaultSelected`', function () {
    var selected = _data["default"].slice(0, 4);

    (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, {
      defaultSelected: selected
    }, function (state) {
      selected = state.selected;
    }));
    expect(selected).toHaveLength(1);
  });
  describe('behaviors when selections are passed in', function () {
    var selected, selectedText;
    beforeEach(function () {
      selected = _data["default"].slice(0, 1);
      selectedText = selected[0].name;
    });
    afterEach( /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3() {
      var input, items;
      return _regenerator["default"].wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              input = (0, _helpers.getInput)();
              input.focus();
              expect(input).toHaveValue(selectedText);
              _context3.next = 5;
              return (0, _helpers.findItems)();

            case 5:
              items = _context3.sent;
              expect(items).toHaveLength(1);
              expect(items[0]).toHaveTextContent(selectedText);

            case 8:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    })));
    it('filters menu options based on `selected` values', function () {
      (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, {
        selected: selected
      }));
    });
    it('filters menu options based on `defaultSelected` values', function () {
      (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, {
        defaultSelected: selected
      }));
    });
  });
  it('uses the `filterBy` prop as a callback to filter results', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee4() {
    var filterBy, input, items;
    return _regenerator["default"].wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            filterBy = jest.fn(function (option, props) {
              return option.name.indexOf(props.text) > -1;
            });
            (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, {
              filterBy: filterBy
            }));
            input = (0, _helpers.getInput)();

            _helpers.userEvent.type(input, 'Cali');

            _context4.next = 6;
            return (0, _helpers.findItems)();

          case 6:
            items = _context4.sent;
            expect(items).toHaveLength(1);
            expect(items[0]).toHaveTextContent('California');
            expect(filterBy).toHaveBeenCalled();

          case 10:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  })));
  it('does not filter options when the menu is closed', function () {
    var filterBy = jest.fn();
    (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, {
      filterBy: filterBy,
      open: false
    }));
    var input = (0, _helpers.getInput)();

    _helpers.userEvent.type(input, 'Cali');

    expect(filterBy).not.toHaveBeenCalled();
  });
  describe('menu visibility behavior', function () {
    it('shows the menu on initial render', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee5() {
      return _regenerator["default"].wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, {
                defaultOpen: true
              }));
              _context5.t0 = expect;
              _context5.next = 4;
              return (0, _helpers.findMenu)();

            case 4:
              _context5.t1 = _context5.sent;
              (0, _context5.t0)(_context5.t1).toBeInTheDocument();

            case 6:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5);
    })));
    it('shows the menu when `open` is `true`', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee6() {
      return _regenerator["default"].wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, {
                open: true
              }));
              _context6.t0 = expect;
              _context6.next = 4;
              return (0, _helpers.findMenu)();

            case 4:
              _context6.t1 = _context6.sent;
              (0, _context6.t0)(_context6.t1).toBeInTheDocument();

            case 6:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6);
    })));
    it('hides the menu when `open` is `false`', function () {
      (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, {
        open: false
      }));
      (0, _helpers.getInput)().focus();
      expect((0, _helpers.getMenu)()).not.toBeInTheDocument();
    });
    it('shows the menu when the input is focused', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee7() {
      return _regenerator["default"].wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, null));
              (0, _helpers.getInput)().focus();
              _context7.t0 = expect;
              _context7.next = 5;
              return (0, _helpers.findMenu)();

            case 5:
              _context7.t1 = _context7.sent;
              (0, _context7.t0)(_context7.t1).toBeInTheDocument();

            case 7:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7);
    })));
    it('hides the menu on focus when `minLength=1`', function () {
      (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, {
        minLength: 1
      }));
      (0, _helpers.getInput)().focus();
      expect((0, _helpers.getMenu)()).not.toBeInTheDocument();
    });
    it('shows the menu when there are no results and `allowNew=true`', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee8() {
      var items;
      return _regenerator["default"].wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(AllowNew, {
                options: []
              }));

              _helpers.userEvent.type((0, _helpers.getInput)(), 'xx');

              _context8.next = 4;
              return (0, _helpers.findItems)();

            case 4:
              items = _context8.sent;
              expect(items).toHaveLength(1);
              expect(items[0]).toHaveTextContent('New selection: xx');

            case 7:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8);
    })));
  });
  it('should disable the input if the component is disabled', function () {
    (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, {
      disabled: true
    }));
    expect((0, _helpers.getInput)()).toBeDisabled();
  });
  it('should not highlight disabled options', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee9() {
    var options, items;
    return _regenerator["default"].wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            options = [{
              name: 'foo'
            }, {
              disabled: true,
              name: 'bar'
            }, {
              disabled: true,
              name: 'boo'
            }, {
              name: 'baz'
            }, {
              disabled: true,
              name: 'bro'
            }];
            (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, {
              options: options
            }));
            (0, _helpers.getInput)().focus();
            _context9.next = 5;
            return (0, _helpers.findItems)();

          case 5:
            items = _context9.sent;
            expect(items[1]).toHaveClass('disabled');
            expect(items[2]).toHaveClass('disabled');
            expect(items[4]).toHaveClass('disabled');

            _helpers.userEvent.keyboard('{arrowdown}');

            expect(items[0]).toHaveClass('active');

            _helpers.userEvent.keyboard('{arrowdown}');

            expect(items[3]).toHaveClass('active');

            _helpers.userEvent.keyboard('{arrowup}');

            expect(items[0]).toHaveClass('active');

            _helpers.userEvent.keyboard('{arrowup}{arrowup}');

            expect(items[3]).toHaveClass('active');

          case 17:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9);
  })));
  describe('pagination behaviors', function () {
    var onPaginate, shownResultsCount;
    beforeEach(function () {
      shownResultsCount = 10;
      onPaginate = jest.fn(function (e, shownResults) {
        shownResultsCount = shownResults;
      });
    });
    it('has a menu item for pagination', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee10() {
      var paginator;
      return _regenerator["default"].wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Pagination, null));
              (0, _helpers.getInput)().focus();
              _context10.next = 4;
              return (0, _helpers.findPaginator)();

            case 4:
              paginator = _context10.sent;
              expect(paginator).toHaveTextContent('Display additional results...');
              expect(paginator).toHaveClass('rbt-menu-pagination-option');

            case 7:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10);
    })));
    it('handles non-string labels', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee11() {
      var paginator;
      return _regenerator["default"].wrap(function _callee11$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Pagination, {
                paginationText: /*#__PURE__*/_react["default"].createElement("div", null, "More...")
              }));
              (0, _helpers.getInput)().focus();
              _context11.next = 4;
              return (0, _helpers.findPaginator)();

            case 4:
              paginator = _context11.sent;
              expect(paginator).toHaveTextContent('More...');
              expect(paginator).toHaveAttribute('aria-label', '');

            case 7:
            case "end":
              return _context11.stop();
          }
        }
      }, _callee11);
    })));
    it('triggers the pagination item via mouse or keyboard', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee12() {
      var paginator;
      return _regenerator["default"].wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Pagination, {
                onPaginate: onPaginate
              }));
              (0, _helpers.getInput)().focus();
              _context12.next = 4;
              return (0, _helpers.findPaginator)();

            case 4:
              paginator = _context12.sent;

              _helpers.userEvent.click(paginator);

              expect(onPaginate).toHaveBeenCalledTimes(1);
              expect(shownResultsCount).toBe(20);
              expect((0, _helpers.getItems)()).toHaveLength(21);

              _helpers.userEvent.keyboard('{arrowup}{enter}');

              expect(onPaginate).toHaveBeenCalledTimes(2);
              expect(shownResultsCount).toBe(30);
              expect((0, _helpers.getItems)()).toHaveLength(31);

            case 13:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12);
    })));
    it('calls `onPaginate` when `labelKey` is a function', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee13() {
      return _regenerator["default"].wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Pagination, {
                labelKey: function labelKey(o) {
                  return o.name;
                },
                onPaginate: onPaginate
              }));
              (0, _helpers.getInput)().focus();

              _helpers.userEvent.keyboard('{arrowup}{enter}');

              _context13.next = 5;
              return (0, _helpers.waitFor)(function () {
                expect(onPaginate).toHaveBeenCalledTimes(1);
              });

            case 5:
              expect(shownResultsCount).toBe(20);
              expect((0, _helpers.getItems)()).toHaveLength(21);

            case 7:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee13);
    })));
    it('displays custom pagination text', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee14() {
      var paginationText, paginator;
      return _regenerator["default"].wrap(function _callee14$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              paginationText = 'More Results...';
              (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Pagination, {
                paginationText: paginationText
              }));
              (0, _helpers.getInput)().focus();
              _context14.next = 5;
              return (0, _helpers.findPaginator)();

            case 5:
              paginator = _context14.sent;
              expect(paginator).toHaveTextContent(paginationText);

            case 7:
            case "end":
              return _context14.stop();
          }
        }
      }, _callee14);
    })));
    it('does not have a menu item for pagination', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee15() {
      var paginator;
      return _regenerator["default"].wrap(function _callee15$(_context15) {
        while (1) {
          switch (_context15.prev = _context15.next) {
            case 0:
              (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Pagination, {
                paginate: false
              }));
              (0, _helpers.getInput)().focus();
              _context15.next = 4;
              return (0, _helpers.findPaginator)();

            case 4:
              paginator = _context15.sent;
              expect(paginator).not.toHaveTextContent('Display additional results...');
              expect(paginator).not.toHaveClass('rbt-menu-pagination-option');

            case 7:
            case "end":
              return _context15.stop();
          }
        }
      }, _callee15);
    })));
    it('resets the shown results when the input value changes', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee16() {
      var input;
      return _regenerator["default"].wrap(function _callee16$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Pagination, {
                maxResults: 5,
                onPaginate: onPaginate
              }));
              input = (0, _helpers.getInput)();

              _helpers.userEvent.type(input, 'ar');

              _helpers.userEvent.keyboard('{arrowup}{enter}');

              _context16.next = 6;
              return (0, _helpers.waitFor)(function () {
                expect(onPaginate).toHaveBeenCalledTimes(1);
              });

            case 6:
              expect(shownResultsCount).toBe(10);

              _helpers.userEvent.clear(input);

              _helpers.userEvent.type(input, 'or');

              _helpers.userEvent.keyboard('{arrowup}{enter}');

              _context16.next = 12;
              return (0, _helpers.waitFor)(function () {
                expect(onPaginate).toHaveBeenCalledTimes(2);
              });

            case 12:
              expect(shownResultsCount).toBe(10);

            case 13:
            case "end":
              return _context16.stop();
          }
        }
      }, _callee16);
    })));
    it('updates the active item after pagination', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee17() {
      var items;
      return _regenerator["default"].wrap(function _callee17$(_context17) {
        while (1) {
          switch (_context17.prev = _context17.next) {
            case 0:
              (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Pagination, null));
              (0, _helpers.getInput)().focus();

              _helpers.userEvent.keyboard('{arrowup}{enter}');

              _context17.next = 5;
              return (0, _helpers.findItems)();

            case 5:
              items = _context17.sent;
              expect(items).toHaveLength(21);
              expect(items[10]).toHaveClass('active');

            case 8:
            case "end":
              return _context17.stop();
          }
        }
      }, _callee17);
    })));
  });
  describe('when `maxResults` is set', function () {
    it('should limit results when `paginate=true`', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee18() {
      var items;
      return _regenerator["default"].wrap(function _callee18$(_context18) {
        while (1) {
          switch (_context18.prev = _context18.next) {
            case 0:
              (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Pagination, null));
              (0, _helpers.getInput)().focus(); // When `paginate` is true, there will be a pagination menu item in
              // addition to the shown results.

              _context18.next = 4;
              return (0, _helpers.findItems)();

            case 4:
              items = _context18.sent;
              expect(items).toHaveLength(11);

            case 6:
            case "end":
              return _context18.stop();
          }
        }
      }, _callee18);
    })));
    it('should limit results when `paginate=false`', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee19() {
      var items;
      return _regenerator["default"].wrap(function _callee19$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Pagination, {
                paginate: false
              }));
              (0, _helpers.getInput)().focus();
              _context19.next = 4;
              return (0, _helpers.findItems)();

            case 4:
              items = _context19.sent;
              expect(items).toHaveLength(10);

            case 6:
            case "end":
              return _context19.stop();
          }
        }
      }, _callee19);
    })));
  });
  it('renders a large input', function () {
    (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, {
      size: "lg"
    }));
    expect((0, _helpers.getInput)()).toHaveClass('form-control-lg');
  });
  it('renders a small input', function () {
    (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, {
      size: "sm"
    }));
    expect((0, _helpers.getInput)()).toHaveClass('form-control-sm');
  });
  it('renders a loading indicator', function () {
    (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, {
      isLoading: true
    }));
    expect(_helpers.screen.queryByRole('status')).toBeInTheDocument();
  });
  describe('updates when re-rendering with new props', function () {
    it('acts as a controlled input in single-select mode', function () {
      var selected = [];

      var children = function children(state) {
        selected = state.selected;
      };

      var selected1 = _data["default"].slice(0, 1);

      var selected2 = _data["default"].slice(1, 2); // Pass in new selection


      var _render = (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, {
        selected: selected1
      }, children)),
          rerender = _render.rerender;

      expect(selected).toEqual(selected1);
      expect((0, _helpers.getInput)()).toHaveValue(selected1[0].name); // Pass in another new selection

      rerender( /*#__PURE__*/_react["default"].createElement(Default, {
        selected: selected2
      }, children));
      expect(selected).toEqual(selected2);
      expect((0, _helpers.getInput)()).toHaveValue(selected2[0].name); // Clear the selections.

      rerender( /*#__PURE__*/_react["default"].createElement(Default, {
        selected: []
      }, children));
      expect(selected).toEqual([]);
      expect((0, _helpers.getInput)()).toHaveValue('');
    });
    it('acts as a controlled input in multi-select mode', function () {
      var _render2 = (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(MultiSelect, {
        selected: _data["default"].slice(0, 4)
      })),
          container = _render2.container,
          rerender = _render2.rerender;

      var tokens = (0, _helpers.getTokens)(container);
      var input = (0, _helpers.getInput)();
      expect(tokens).toHaveLength(4);
      expect(input).toHaveValue(''); // Clear the selections.

      rerender( /*#__PURE__*/_react["default"].createElement(MultiSelect, {
        selected: []
      }));
      expect(tokens).toHaveLength(0);
      expect(input).toHaveValue('');
    });
    it('updates the selections and input value in single-select mode', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee20() {
      var selected, input;
      return _regenerator["default"].wrap(function _callee20$(_context20) {
        while (1) {
          switch (_context20.prev = _context20.next) {
            case 0:
              selected = [];
              (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Controlled, {
                selected: _data["default"].slice(0, 1)
              }, function (state) {
                selected = state.selected;
              }));
              input = (0, _helpers.getInput)();
              expect(selected).toHaveLength(1);
              expect(input).toHaveValue('Alabama'); // Delete the last character.

              input.focus();

              _helpers.userEvent.keyboard('{backspace}'); // Text entry should clear the selection and keep the partial entry.


              _context20.next = 9;
              return (0, _helpers.waitFor)(function () {
                expect(selected).toHaveLength(0);
              });

            case 9:
              expect(input).toHaveValue('Alabam');

            case 10:
            case "end":
              return _context20.stop();
          }
        }
      }, _callee20);
    })));
  });
  describe('`highlightOnlyResult` behavior', function () {
    var onChange, selected;
    beforeEach(function () {
      onChange = jest.fn(function (s) {
        return selected = [s];
      });
      selected = [];
    });
    it('does not highlight the only result', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee21() {
      var input, items;
      return _regenerator["default"].wrap(function _callee21$(_context21) {
        while (1) {
          switch (_context21.prev = _context21.next) {
            case 0:
              (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, {
                onChange: onChange
              }));
              input = (0, _helpers.getInput)();

              _helpers.userEvent.type(input, 'Alab');

              _context21.next = 5;
              return (0, _helpers.findItems)();

            case 5:
              items = _context21.sent;
              expect(items).toHaveLength(1);
              expect(items[0]).not.toHaveClass('active');

              _helpers.userEvent.keyboard('{enter}');

              expect(selected).toHaveLength(0);
              expect(onChange).toHaveBeenCalledTimes(0);

            case 11:
            case "end":
              return _context21.stop();
          }
        }
      }, _callee21);
    })));
    it('highlights the only result', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee22() {
      var input, items;
      return _regenerator["default"].wrap(function _callee22$(_context22) {
        while (1) {
          switch (_context22.prev = _context22.next) {
            case 0:
              (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, {
                highlightOnlyResult: true,
                onChange: onChange
              }));
              input = (0, _helpers.getInput)();

              _helpers.userEvent.type(input, 'Alab');

              _context22.next = 5;
              return (0, _helpers.findItems)();

            case 5:
              items = _context22.sent;
              expect(items).toHaveLength(1);
              expect(items[0]).toHaveClass('active');

              _helpers.userEvent.keyboard('{enter}');

              expect(selected).toHaveLength(1);
              expect(onChange).toHaveBeenCalledTimes(1);

            case 11:
            case "end":
              return _context22.stop();
          }
        }
      }, _callee22);
    })));
    it('does not highlight the only result when `allowNew=true`', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee23() {
      var input, items;
      return _regenerator["default"].wrap(function _callee23$(_context23) {
        while (1) {
          switch (_context23.prev = _context23.next) {
            case 0:
              (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(AllowNew, {
                highlightOnlyResult: true,
                onChange: onChange
              }));
              input = (0, _helpers.getInput)();

              _helpers.userEvent.type(input, 'qqq');

              _context23.next = 5;
              return (0, _helpers.findItems)();

            case 5:
              items = _context23.sent;
              expect(items).toHaveLength(1);
              expect(items[0]).not.toHaveClass('active');

              _helpers.userEvent.keyboard('{enter}');

              expect(selected).toHaveLength(0);
              expect(onChange).toHaveBeenCalledTimes(0);

            case 11:
            case "end":
              return _context23.stop();
          }
        }
      }, _callee23);
    })));
    it('does not highlight or select a disabled result', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee24() {
      var input, items;
      return _regenerator["default"].wrap(function _callee24$(_context24) {
        while (1) {
          switch (_context24.prev = _context24.next) {
            case 0:
              (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, {
                highlightOnlyResult: true,
                onChange: onChange,
                options: [{
                  name: 'foo'
                }, {
                  disabled: true,
                  name: 'bar'
                }, {
                  disabled: true,
                  name: 'boo'
                }, {
                  name: 'baz'
                }]
              }));
              input = (0, _helpers.getInput)();

              _helpers.userEvent.type(input, 'bar');

              _context24.next = 5;
              return (0, _helpers.findItems)();

            case 5:
              items = _context24.sent;
              expect(items).toHaveLength(1);
              expect(items[0]).not.toHaveClass('active');

              _helpers.userEvent.keyboard('{enter}');

              expect(selected).toHaveLength(0);
              expect(onChange).toHaveBeenCalledTimes(0);

            case 11:
            case "end":
              return _context24.stop();
          }
        }
      }, _callee24);
    })));
  });
  it('displays the active item value in the input', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee25() {
    var input;
    return _regenerator["default"].wrap(function _callee25$(_context25) {
      while (1) {
        switch (_context25.prev = _context25.next) {
          case 0:
            (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, null));
            input = (0, _helpers.getInput)();
            input.focus();

            _helpers.userEvent.keyboard('{arrowdown}');

            _context25.next = 6;
            return (0, _helpers.waitFor)(function () {
              expect(input).toHaveValue('Alabama');
            });

          case 6:
          case "end":
            return _context25.stop();
        }
      }
    }, _callee25);
  })));
  it('applies custom styles to the top-level container', function () {
    var _render3 = (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, {
      style: {
        display: 'inline-flex'
      }
    })),
        container = _render3.container;

    expect(container.firstChild).toHaveStyle('display: inline-flex');
  });
  describe('input props', function () {
    var input, inputProps;
    beforeEach(function () {
      inputProps = {
        autoComplete: 'nope',
        className: 'input-classname',
        id: 'input-id',
        name: 'input-name',
        onClick: jest.fn(),
        tabIndex: '5',
        type: 'number'
      };
    });
    afterEach( /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee26() {
      return _regenerator["default"].wrap(function _callee26$(_context26) {
        while (1) {
          switch (_context26.prev = _context26.next) {
            case 0:
              _helpers.userEvent.click(input);

              _context26.next = 3;
              return (0, _helpers.waitFor)(function () {
                expect(inputProps.onClick).toHaveBeenCalledTimes(1);
              });

            case 3:
              expect(input).toHaveAttribute('autocomplete', inputProps.autoComplete);
              expect(input).toHaveClass(inputProps.className);
              expect(input).toHaveAttribute('id', inputProps.id);
              expect(input).toHaveAttribute('name', inputProps.name);
              expect(input).toHaveAttribute('tabIndex', inputProps.tabIndex);
              expect(input).toHaveAttribute('type', inputProps.type);

            case 9:
            case "end":
              return _context26.stop();
          }
        }
      }, _callee26);
    })));
    it('applies the input props single-select mode', function () {
      (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, {
        inputProps: inputProps
      }));
      input = (0, _helpers.getInput)();
    });
    it('applies the input props in multi-select mode', function () {
      (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(MultiSelect, {
        inputProps: inputProps,
        selected: _data["default"].slice(0, 1)
      }));
      input = _helpers.screen.getByRole('spinbutton');

      var token = _helpers.screen.getByRole('button').parentElement;

      expect(token).toHaveAttribute('tabIndex', inputProps.tabIndex);
    });
  });
  it('calls `onBlur`', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee27() {
    var onBlur, input;
    return _regenerator["default"].wrap(function _callee27$(_context27) {
      while (1) {
        switch (_context27.prev = _context27.next) {
          case 0:
            onBlur = jest.fn();
            (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, {
              onBlur: onBlur
            }));
            input = (0, _helpers.getInput)();

            _helpers.userEvent.click(input);

            input.blur();
            _context27.next = 7;
            return (0, _helpers.waitFor)(function () {
              expect(onBlur).toHaveBeenCalledTimes(1);
            });

          case 7:
          case "end":
            return _context27.stop();
        }
      }
    }, _callee27);
  })));
  it('calls `onFocus`', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee28() {
    var onFocus;
    return _regenerator["default"].wrap(function _callee28$(_context28) {
      while (1) {
        switch (_context28.prev = _context28.next) {
          case 0:
            onFocus = jest.fn();
            (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, {
              onFocus: onFocus
            }));

            _helpers.userEvent.click((0, _helpers.getInput)());

            _context28.next = 5;
            return (0, _helpers.waitFor)(function () {
              expect(onFocus).toHaveBeenCalledTimes(1);
            });

          case 5:
          case "end":
            return _context28.stop();
        }
      }
    }, _callee28);
  })));
  it('calls `onKeyDown`', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee29() {
    var onKeyDown;
    return _regenerator["default"].wrap(function _callee29$(_context29) {
      while (1) {
        switch (_context29.prev = _context29.next) {
          case 0:
            onKeyDown = jest.fn();
            (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, {
              onKeyDown: onKeyDown
            }));

            _helpers.userEvent.click((0, _helpers.getInput)());

            _helpers.userEvent.keyboard('{enter}');

            _context29.next = 6;
            return (0, _helpers.waitFor)(function () {
              expect(onKeyDown).toHaveBeenCalledTimes(1);
            });

          case 6:
          case "end":
            return _context29.stop();
        }
      }
    }, _callee29);
  })));
  it('calls `onMenuToggle`', function () {
    var onMenuToggle = jest.fn();
    (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, {
      onMenuToggle: onMenuToggle
    }));
    var input = (0, _helpers.getInput)();
    expect(onMenuToggle).toHaveBeenCalledTimes(0);
    input.focus();
    expect(onMenuToggle).toHaveBeenCalledTimes(1); // Shouldn't be called again if not hidden first.

    input.focus();
    expect(onMenuToggle).toHaveBeenCalledTimes(1);

    _helpers.userEvent.keyboard('{esc}');

    expect(onMenuToggle).toHaveBeenCalledTimes(2);
  });
  describe('hint behavior', function () {
    it('hides and shows the hint in the single-select case', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee30() {
      var _render4, container, input, hint;

      return _regenerator["default"].wrap(function _callee30$(_context30) {
        while (1) {
          switch (_context30.prev = _context30.next) {
            case 0:
              _render4 = (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, null)), container = _render4.container;
              input = (0, _helpers.getInput)();
              hint = (0, _helpers.getHint)(container);

              _helpers.userEvent.type(input, 'Ala');

              _context30.next = 6;
              return (0, _helpers.waitFor)(function () {
                expect(input).toHaveFocus();
              });

            case 6:
              expect(hint).toHaveValue('Alabama');
              input.blur();
              expect(input).not.toHaveFocus();
              expect(hint).toHaveValue('');

            case 10:
            case "end":
              return _context30.stop();
          }
        }
      }, _callee30);
    })));
    it('hides and shows the hint in the multi-select case', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee31() {
      var _render5, container, input, hint;

      return _regenerator["default"].wrap(function _callee31$(_context31) {
        while (1) {
          switch (_context31.prev = _context31.next) {
            case 0:
              _render5 = (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(MultiSelect, {
                selected: []
              })), container = _render5.container;
              input = (0, _helpers.getInput)();
              hint = (0, _helpers.getHint)(container);

              _helpers.userEvent.type(input, 'Ala');

              _context31.next = 6;
              return (0, _helpers.waitFor)(function () {
                expect(input).toHaveFocus();
              });

            case 6:
              expect(hint).toHaveValue('Alabama');
              input.blur();
              expect(input).not.toHaveFocus();
              expect(hint).toHaveValue('');

            case 10:
            case "end":
              return _context31.stop();
          }
        }
      }, _callee31);
    })));
    it('does not display a hint if the menu is hidden', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee32() {
      var _render6, container, input, hint;

      return _regenerator["default"].wrap(function _callee32$(_context32) {
        while (1) {
          switch (_context32.prev = _context32.next) {
            case 0:
              _render6 = (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, null)), container = _render6.container;
              input = (0, _helpers.getInput)();
              hint = (0, _helpers.getHint)(container);

              _helpers.userEvent.type(input, 'Ala'); // When focused, the typeahead should show the menu and hint text.


              expect((0, _helpers.getMenu)()).toBeInTheDocument();
              expect(hint).toHaveValue('Alabama');

              _helpers.userEvent.keyboard('{esc}'); // Expect the input to remain focused, but the menu and hint to be hidden.


              expect(input).toHaveFocus();
              expect((0, _helpers.getMenu)()).not.toBeInTheDocument();
              expect(hint).toHaveValue('');

            case 10:
            case "end":
              return _context32.stop();
          }
        }
      }, _callee32);
    })));
  });
  describe('behavior when selecting the hinted result', function () {
    var key, onChange, onKeyDown;
    beforeEach(function () {
      key = 0;
      onChange = jest.fn();
      onKeyDown = jest.fn(function (e) {
        return key = e.key;
      });
    });
    it('should select the hinted result on tab keydown', function () {
      (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, {
        onChange: onChange,
        onKeyDown: onKeyDown
      }));

      _helpers.userEvent.type((0, _helpers.getInput)(), 'Ala');

      _helpers.userEvent.tab();

      expect(key).toBe('Tab');
      expect(onChange).toHaveBeenCalledTimes(1);
    });
    it('should select the hinted result on right arrow keydown', function () {
      (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, {
        onChange: onChange,
        onKeyDown: onKeyDown
      }));
      var input = (0, _helpers.getInput)();

      _helpers.userEvent.type(input, 'Ala');

      _helpers.userEvent.keyboard('{arrowright}');

      expect(key).toBe('ArrowRight');
      expect(onChange).toHaveBeenCalledTimes(1);
    });
    it('should not select the hinted result on right arrow keydown unless ' + 'the cursor is at the end of the input value', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee33() {
      var input;
      return _regenerator["default"].wrap(function _callee33$(_context33) {
        while (1) {
          switch (_context33.prev = _context33.next) {
            case 0:
              (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, {
                onChange: onChange,
                onKeyDown: onKeyDown
              }));
              input = (0, _helpers.getInput)();

              _helpers.userEvent.type(input, 'Ala');

              _context33.next = 5;
              return (0, _helpers.waitForOverlay)();

            case 5:
              input.selectionStart = 1;

              _helpers.userEvent.keyboard('{arrowright}');

              expect(key).toBe('ArrowRight');
              expect(onChange).toHaveBeenCalledTimes(0);

            case 9:
            case "end":
              return _context33.stop();
          }
        }
      }, _callee33);
    })));
    it('should not select the hinted result on enter keydown', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee34() {
      var input;
      return _regenerator["default"].wrap(function _callee34$(_context34) {
        while (1) {
          switch (_context34.prev = _context34.next) {
            case 0:
              (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, {
                onChange: onChange,
                onKeyDown: onKeyDown
              }));
              input = (0, _helpers.getInput)();

              _helpers.userEvent.type(input, 'Ala');

              _context34.next = 5;
              return (0, _helpers.waitForOverlay)();

            case 5:
              _helpers.userEvent.keyboard('{enter}');

              expect(key).toBe('Enter');
              expect(onChange).toHaveBeenCalledTimes(0);

            case 8:
            case "end":
              return _context34.stop();
          }
        }
      }, _callee34);
    })));
    it('should select the hinted result on enter keydown', function () {
      (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, {
        onChange: onChange,
        onKeyDown: onKeyDown,
        selectHint: function selectHint(shouldSelectHint, e) {
          return e.key === 'Enter' || shouldSelectHint;
        }
      }));
      var input = (0, _helpers.getInput)();

      _helpers.userEvent.type(input, 'Ala');

      _helpers.userEvent.keyboard('{enter}');

      expect(key).toBe('Enter');
      expect(onChange).toHaveBeenCalledTimes(1);
    });
  });
  describe('keydown behaviors with active item', function () {
    var onChange, onKeyDown;
    beforeEach(function () {
      onChange = jest.fn();
      onKeyDown = jest.fn();
    });
    it('selects the active item when pressing return', function () {
      (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, {
        onChange: onChange,
        onKeyDown: onKeyDown
      }));
      (0, _helpers.getInput)().focus();

      _helpers.userEvent.keyboard('{arrowdown}{enter}');

      expect(onChange).toHaveBeenCalledTimes(1);
      expect(onKeyDown).toHaveBeenCalledTimes(2);
    });
    it('does not select the active item when the menu is closed', function () {
      (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, {
        onChange: onChange,
        onKeyDown: onKeyDown,
        open: false
      }));
      (0, _helpers.getInput)().focus();

      _helpers.userEvent.keyboard('{arrowdown}{enter}');

      expect(onChange).toHaveBeenCalledTimes(0);
      expect(onKeyDown).toHaveBeenCalledTimes(2);
    });
  });
  it('prevents form submission when the menu is open', function () {
    var onSubmit = jest.fn();
    (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement("form", {
      onSubmit: onSubmit
    }, /*#__PURE__*/_react["default"].createElement(Default, null), /*#__PURE__*/_react["default"].createElement("button", {
      type: "submit"
    }, "submit")));
    var input = (0, _helpers.getInput)();
    input.focus();

    _helpers.userEvent.keyboard('{enter}');

    expect(onSubmit).toHaveBeenCalledTimes(0);

    _helpers.userEvent.keyboard('{esc}{enter}');

    expect(onSubmit).toHaveBeenCalledTimes(1);
  });
  it('hides the menu when tabbing out of the input', function () {
    (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, null));
    (0, _helpers.getInput)().focus();
    expect((0, _helpers.getMenu)()).toBeInTheDocument();

    _helpers.userEvent.tab();

    expect((0, _helpers.getMenu)()).not.toBeInTheDocument();
  });
  it('calls the keydown handler when a key is pressed', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee35() {
    var onKeyDown;
    return _regenerator["default"].wrap(function _callee35$(_context35) {
      while (1) {
        switch (_context35.prev = _context35.next) {
          case 0:
            onKeyDown = jest.fn();
            (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, {
              onKeyDown: onKeyDown
            }));

            _helpers.userEvent.type((0, _helpers.getInput)(), 'foo');

            _context35.next = 5;
            return (0, _helpers.waitFor)(function () {
              expect(onKeyDown).toHaveBeenCalledTimes(3);
            });

          case 5:
          case "end":
            return _context35.stop();
        }
      }
    }, _callee35);
  })));
  describe('accessibility attributes', function () {
    it('adds an id to the menu for accessibility', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee36() {
      var _render7, rerender, input, menu, id;

      return _regenerator["default"].wrap(function _callee36$(_context36) {
        while (1) {
          switch (_context36.prev = _context36.next) {
            case 0:
              _render7 = (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, null)), rerender = _render7.rerender;
              input = (0, _helpers.getInput)();
              expect(input).not.toHaveAttribute('aria-owns');
              input.focus();
              _context36.next = 6;
              return (0, _helpers.findMenu)();

            case 6:
              menu = _context36.sent;
              expect(menu).toHaveAttribute('id', ID);
              expect(input).toHaveAttribute('aria-owns', ID);
              id = 'my-id';
              rerender( /*#__PURE__*/_react["default"].createElement(Default, {
                id: id
              }));
              expect(menu).toHaveAttribute('id', id);
              expect(input).toHaveAttribute('aria-owns', id);

            case 13:
            case "end":
              return _context36.stop();
          }
        }
      }, _callee36);
    })));
    it('sets aria attributes for single-selection', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee37() {
      var input;
      return _regenerator["default"].wrap(function _callee37$(_context37) {
        while (1) {
          switch (_context37.prev = _context37.next) {
            case 0:
              (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, {
                id: "my-id"
              }));
              input = (0, _helpers.getInput)();
              expect(input).toHaveAttribute('aria-autocomplete', 'both');
              expect(input).toHaveAttribute('aria-expanded', 'false');
              expect(input).not.toHaveAttribute('aria-activedescendant');
              input.focus();

              _helpers.userEvent.keyboard('{arrowdown}');

              _context37.next = 9;
              return (0, _helpers.waitFor)(function () {
                expect(input).toHaveAttribute('aria-expanded', 'true');
              });

            case 9:
              expect(input).toHaveAttribute('aria-activedescendant', 'my-id-item-0');

            case 10:
            case "end":
              return _context37.stop();
          }
        }
      }, _callee37);
    })));
    it('sets aria attributes for multi-selection', function () {
      (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(MultiSelect, null));
      var input = (0, _helpers.getInput)();
      expect(input).toHaveAttribute('aria-autocomplete', 'list');
      expect(input).not.toHaveAttribute('aria-expanded');
    });
    it('sets menu item attributes', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee38() {
      var items, item;
      return _regenerator["default"].wrap(function _callee38$(_context38) {
        while (1) {
          switch (_context38.prev = _context38.next) {
            case 0:
              (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, {
                id: "my-id"
              }));
              (0, _helpers.getInput)().focus();
              _context38.next = 4;
              return (0, _helpers.findItems)();

            case 4:
              items = _context38.sent;
              item = items[0];
              expect(item).toHaveAttribute('aria-label', 'Alabama');
              expect(item).toHaveAttribute('aria-selected', 'false');
              expect(item).toHaveClass('dropdown-item');

              _helpers.userEvent.keyboard('{arrowdown}');

              expect(item).toHaveAttribute('aria-selected', 'true');

            case 11:
            case "end":
              return _context38.stop();
          }
        }
      }, _callee38);
    })));
  });
  describe('<Typeahead> multi-select', function () {
    it('displays and removes selections', function () {
      (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(MultiSelect, null)); // Use close button as a proxy for the token.

      var closeButtons = _helpers.screen.getAllByRole('button');

      expect(closeButtons).toHaveLength(4);

      _helpers.userEvent.click(closeButtons[0]);

      expect(_helpers.screen.getAllByRole('button')).toHaveLength(3);
    });
    it('adds selections', function () {
      (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(MultiSelect, null));
      var input = (0, _helpers.getInput)();
      input.focus();

      _helpers.userEvent.keyboard('{arrowdown}{enter}');

      expect(_helpers.screen.getAllByRole('button')).toHaveLength(5);
      expect(input).toHaveValue('');
    });
  });
  it('opens the menu when the up or down arrow keys are pressed', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee39() {
    var input;
    return _regenerator["default"].wrap(function _callee39$(_context39) {
      while (1) {
        switch (_context39.prev = _context39.next) {
          case 0:
            (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, null));
            input = (0, _helpers.getInput)();
            input.focus();
            _context39.t0 = expect;
            _context39.next = 6;
            return (0, _helpers.findMenu)();

          case 6:
            _context39.t1 = _context39.sent;
            (0, _context39.t0)(_context39.t1).toBeInTheDocument();

            _helpers.userEvent.keyboard('{esc}');

            expect((0, _helpers.getMenu)()).not.toBeInTheDocument();

            _helpers.userEvent.keyboard('{arrowdown}');

            _context39.t2 = expect;
            _context39.next = 14;
            return (0, _helpers.findMenu)();

          case 14:
            _context39.t3 = _context39.sent;
            (0, _context39.t2)(_context39.t3).toBeInTheDocument();

            _helpers.userEvent.keyboard('{esc}');

            expect((0, _helpers.getMenu)()).not.toBeInTheDocument();

            _helpers.userEvent.keyboard('{arrowup}');

            _context39.t4 = expect;
            _context39.next = 22;
            return (0, _helpers.findMenu)();

          case 22:
            _context39.t5 = _context39.sent;
            (0, _context39.t4)(_context39.t5).toBeInTheDocument();

          case 24:
          case "end":
            return _context39.stop();
        }
      }
    }, _callee39);
  })));
  it('renders a custom input', function () {
    var renderInput = jest.fn();
    (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, {
      renderInput: renderInput
    }));
    expect(renderInput).toHaveBeenCalled();
  });
  it('renders custom content in the menu items', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee40() {
    var items;
    return _regenerator["default"].wrap(function _callee40$(_context40) {
      while (1) {
        switch (_context40.prev = _context40.next) {
          case 0:
            (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, {
              renderMenuItemChildren: // Render the capital instead of the state name.
              function renderMenuItemChildren(o) {
                return o.capital;
              }
            }));
            (0, _helpers.getInput)().focus();
            _context40.next = 4;
            return (0, _helpers.findItems)();

          case 4:
            items = _context40.sent;
            expect(items[0]).toHaveTextContent('Montgomery');

          case 6:
          case "end":
            return _context40.stop();
        }
      }
    }, _callee40);
  })));
  it('renders custom tokens', function () {
    (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, {
      multiple: true,
      renderToken: function renderToken(option, props, idx) {
        return /*#__PURE__*/_react["default"].createElement("div", {
          className: "custom-token",
          key: idx
        }, option.capital);
      },
      selected: _data["default"].slice(0, 1)
    }));
    expect(_helpers.screen.getByText('Montgomery')).toHaveClass('custom-token');
  });
  it('renders children', function () {
    var text = 'This is the child';
    (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, null, /*#__PURE__*/_react["default"].createElement("div", {
      "data-testid": "children"
    }, text)));

    var children = _helpers.screen.queryByTestId('children');

    expect(children).toBeInTheDocument();
    expect(children).toHaveTextContent(text);
  });
  it('renders children via a render function', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee41() {
    var children;
    return _regenerator["default"].wrap(function _callee41$(_context41) {
      while (1) {
        switch (_context41.prev = _context41.next) {
          case 0:
            (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, null, function (props) {
              return /*#__PURE__*/_react["default"].createElement("div", {
                "data-testid": "children"
              }, "The menu ", props.isMenuShown ? 'is' : 'is not', " open");
            }));
            children = _helpers.screen.getByTestId('children');
            expect(children).toHaveTextContent('The menu is not open');
            (0, _helpers.getInput)().focus();
            _context41.next = 6;
            return (0, _helpers.waitFor)(function () {
              expect(children).toHaveTextContent('The menu is open');
            });

          case 6:
          case "end":
            return _context41.stop();
        }
      }
    }, _callee41);
  })));
  describe('validation states', function () {
    it('renders with validation classnames in single-select mode', function () {
      var _render8 = (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, null)),
          rerender = _render8.rerender;

      var input = (0, _helpers.getInput)();
      expect(input).not.toHaveClass('is-invalid');
      expect(input).not.toHaveClass('is-valid');
      rerender( /*#__PURE__*/_react["default"].createElement(Default, {
        isInvalid: true,
        isValid: true
      }));
      expect(input).toHaveClass('is-invalid');
      expect(input).toHaveClass('is-valid');
    });
    it('renders with validation classnames in multi-select mode', function () {
      var _render9 = (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(MultiSelect, null)),
          container = _render9.container,
          rerender = _render9.rerender;

      var formControl = container.getElementsByClassName('form-control')[0];
      expect(formControl).not.toHaveClass('is-invalid');
      expect(formControl).not.toHaveClass('is-valid');
      rerender( /*#__PURE__*/_react["default"].createElement(MultiSelect, {
        isInvalid: true,
        isValid: true
      }));
      expect(formControl).toHaveClass('is-invalid');
      expect(formControl).toHaveClass('is-valid');
    });
  });
  describe('allowNew behavior', function () {
    var emptyLabel, newSelectionPrefix, value;
    beforeEach(function () {
      emptyLabel = 'No results...';
      newSelectionPrefix = 'New selection: ';
      value = 'xxx';
    });
    it('omits the custom option when `allowNew` is set to `false`', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee42() {
      var input, items;
      return _regenerator["default"].wrap(function _callee42$(_context42) {
        while (1) {
          switch (_context42.prev = _context42.next) {
            case 0:
              (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, {
                emptyLabel: emptyLabel
              }));
              input = (0, _helpers.getInput)();

              _helpers.userEvent.type(input, value);

              _context42.next = 5;
              return (0, _helpers.findItems)();

            case 5:
              items = _context42.sent;
              expect(items).toHaveLength(1);
              expect(items[0]).toHaveTextContent(emptyLabel);

            case 8:
            case "end":
              return _context42.stop();
          }
        }
      }, _callee42);
    })));
    it('adds the custom option when `allowNew` is set to `true`', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee43() {
      var selected, input, items;
      return _regenerator["default"].wrap(function _callee43$(_context43) {
        while (1) {
          switch (_context43.prev = _context43.next) {
            case 0:
              (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(AllowNew, {
                emptyLabel: emptyLabel,
                newSelectionPrefix: newSelectionPrefix,
                onChange: function onChange(s) {
                  selected = s;
                }
              }));
              input = (0, _helpers.getInput)();

              _helpers.userEvent.type(input, value);

              _context43.next = 5;
              return (0, _helpers.findItems)();

            case 5:
              items = _context43.sent;
              expect(items).toHaveLength(1);
              expect(items[0]).toHaveTextContent("".concat(newSelectionPrefix).concat(value));

              _helpers.userEvent.click(items[0]);

              expect(selected[0].id).toContain('new-id-');

            case 10:
            case "end":
              return _context43.stop();
          }
        }
      }, _callee43);
    })));
    it('omits the custom option when there is an exact text match', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee44() {
      var input, items;
      return _regenerator["default"].wrap(function _callee44$(_context44) {
        while (1) {
          switch (_context44.prev = _context44.next) {
            case 0:
              value = 'North Carolina';
              (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(AllowNew, null));
              input = (0, _helpers.getInput)();

              _helpers.userEvent.type(input, value);

              _context44.next = 6;
              return (0, _helpers.findItems)();

            case 6:
              items = _context44.sent;
              expect(items).toHaveLength(1);
              expect(items[0]).toHaveTextContent(value);

            case 9:
            case "end":
              return _context44.stop();
          }
        }
      }, _callee44);
    })));
    it('adds a custom option when `allowNew` returns true', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee45() {
      var input, items;
      return _regenerator["default"].wrap(function _callee45$(_context45) {
        while (1) {
          switch (_context45.prev = _context45.next) {
            case 0:
              value = 'North Carolina';
              (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(AllowNew, {
                allowNew: function allowNew() {
                  return true;
                },
                newSelectionPrefix: newSelectionPrefix
              }));
              input = (0, _helpers.getInput)();

              _helpers.userEvent.type(input, value);

              _context45.next = 6;
              return (0, _helpers.findItems)();

            case 6:
              items = _context45.sent;
              expect(items).toHaveLength(2);
              expect(items[0]).toHaveTextContent(value);
              expect(items[1]).toHaveTextContent("".concat(newSelectionPrefix).concat(value));

            case 10:
            case "end":
              return _context45.stop();
          }
        }
      }, _callee45);
    })));
    it('omits new option when `allowNew` returns false', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee46() {
      var input, items;
      return _regenerator["default"].wrap(function _callee46$(_context46) {
        while (1) {
          switch (_context46.prev = _context46.next) {
            case 0:
              (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(AllowNew, {
                allowNew: function allowNew() {
                  return false;
                },
                emptyLabel: emptyLabel
              }));
              input = (0, _helpers.getInput)();

              _helpers.userEvent.type(input, value);

              _context46.next = 5;
              return (0, _helpers.findItems)();

            case 5:
              items = _context46.sent;
              expect(items).toHaveLength(1);
              expect(items[0]).toHaveTextContent(emptyLabel);

            case 8:
            case "end":
              return _context46.stop();
          }
        }
      }, _callee46);
    })));
    it('handles custom options when `labelKey` is a function', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee47() {
      var input, items;
      return _regenerator["default"].wrap(function _callee47$(_context47) {
        while (1) {
          switch (_context47.prev = _context47.next) {
            case 0:
              (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(AllowNew, {
                labelKey: function labelKey(o) {
                  return o.name;
                },
                newSelectionPrefix: newSelectionPrefix
              }));
              input = (0, _helpers.getInput)();

              _helpers.userEvent.type(input, value);

              _context47.next = 5;
              return (0, _helpers.findItems)();

            case 5:
              items = _context47.sent;
              expect(items).toHaveLength(1);
              expect(items[0]).toHaveTextContent("".concat(newSelectionPrefix).concat(value));

            case 8:
            case "end":
              return _context47.stop();
          }
        }
      }, _callee47);
    })));
  });
});
describe('<Typeahead> Public Methods', function () {
  it('exposes the typeahead instance and public methods', function () {
    var ref = /*#__PURE__*/(0, _react.createRef)();
    (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(TestComponent, {
      ref: ref
    }));
    ['clear', 'blur', 'focus', 'getInput', 'hideMenu', 'toggleMenu'].forEach(function (method) {
      expect((0, _typeof2["default"])(ref.current[method])).toBe('function');
    });
  });
  it('calls the public `focus` and `blur` methods', function () {
    var ref = /*#__PURE__*/(0, _react.createRef)();
    (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(TestComponent, {
      ref: ref
    }));
    var input = (0, _helpers.getInput)();
    ref.current.focus();
    expect(input).toHaveFocus();
    ref.current.blur();
    expect(input).not.toHaveFocus();
  });
  it('calls the public `clear` method', function () {
    var ref = /*#__PURE__*/(0, _react.createRef)();

    var _render10 = (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(TestComponent, {
      multiple: true,
      ref: ref,
      selected: _data["default"].slice(0, 3)
    })),
        container = _render10.container;

    var input = (0, _helpers.getInput)();

    _helpers.userEvent.type(input, 'foo');

    var tokens = container.getElementsByClassName('rbt-token');
    expect(tokens).toHaveLength(3);
    expect(input).toHaveValue('foo');
    ref.current.clear();
    expect(tokens).toHaveLength(0);
    expect(input).toHaveValue('');
  });
  it('calls the public `getInput` method', function () {
    var ref = /*#__PURE__*/(0, _react.createRef)();
    (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(TestComponent, {
      ref: ref
    }));
    expect(ref.current.getInput()).toEqual((0, _helpers.getInput)());
  });
  it('calls the public `hideMenu` method', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee48() {
    var ref, menu;
    return _regenerator["default"].wrap(function _callee48$(_context48) {
      while (1) {
        switch (_context48.prev = _context48.next) {
          case 0:
            ref = /*#__PURE__*/(0, _react.createRef)();
            (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(TestComponent, {
              ref: ref
            }));
            (0, _helpers.getInput)().focus();
            _context48.next = 5;
            return (0, _helpers.findMenu)();

          case 5:
            menu = _context48.sent;
            expect(menu).toBeInTheDocument();
            ref.current.hideMenu();
            expect(menu).not.toBeInTheDocument();

          case 9:
          case "end":
            return _context48.stop();
        }
      }
    }, _callee48);
  })));
  it('calls the public `toggleMenu` method', function () {
    var ref = /*#__PURE__*/(0, _react.createRef)();
    (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(TestComponent, {
      ref: ref
    }));
    expect((0, _helpers.getMenu)()).not.toBeInTheDocument();
    ref.current.toggleMenu();
    expect((0, _helpers.getMenu)()).toBeInTheDocument();
    ref.current.toggleMenu();
    expect((0, _helpers.getMenu)()).not.toBeInTheDocument();
  });
  it('clears the typeahead after a selection', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee49() {
    var ref, onChange, input, items;
    return _regenerator["default"].wrap(function _callee49$(_context49) {
      while (1) {
        switch (_context49.prev = _context49.next) {
          case 0:
            ref = /*#__PURE__*/(0, _react.createRef)();
            onChange = jest.fn(function () {
              ref.current.clear();
            });
            (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(TestComponent, {
              onChange: onChange,
              ref: ref
            }));
            input = (0, _helpers.getInput)();
            input.focus();
            _context49.next = 7;
            return (0, _helpers.findItems)();

          case 7:
            items = _context49.sent;

            _helpers.userEvent.click(items[0]);

            expect(onChange).toHaveBeenCalledTimes(1);
            expect(input).toHaveValue('');

          case 11:
          case "end":
            return _context49.stop();
        }
      }
    }, _callee49);
  })));
});
describe('<Typeahead> `change` events', function () {
  var onChange, onInputChange;
  beforeEach(function () {
    onChange = jest.fn();
    onInputChange = jest.fn();
  });
  it('calls `onChange` when a menu item is clicked', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee50() {
    var items;
    return _regenerator["default"].wrap(function _callee50$(_context50) {
      while (1) {
        switch (_context50.prev = _context50.next) {
          case 0:
            (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, {
              onInputChange: onInputChange,
              onChange: onChange
            }));
            (0, _helpers.getInput)().focus();
            _context50.next = 4;
            return (0, _helpers.findItems)();

          case 4:
            items = _context50.sent;

            _helpers.userEvent.click(items[0]);

            expect(onChange).toHaveBeenCalledTimes(1);
            expect(onInputChange).toHaveBeenCalledTimes(0);

          case 8:
          case "end":
            return _context50.stop();
        }
      }
    }, _callee50);
  })));
  it('calls `onChange` when a menu item is selected via keyboard', function () {
    (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, {
      onInputChange: onInputChange,
      onChange: onChange
    }));
    (0, _helpers.getInput)().focus();

    _helpers.userEvent.keyboard('{arrowdown}{enter}');

    expect(onChange).toHaveBeenCalledTimes(1);
    expect(onInputChange).toHaveBeenCalledTimes(0);
  });
  it('handles clear button clicks in single-select mode', function () {
    var event, value;
    onInputChange = jest.fn(function (v, e) {
      value = v;
      event = e;
    });
    (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(ClearButton, {
      onChange: onChange,
      onInputChange: onInputChange
    }));

    _helpers.userEvent.click(_helpers.screen.getByRole('button'));

    expect(onChange).toHaveBeenCalledTimes(1);
    expect(onInputChange).toHaveBeenCalledTimes(1);
    expect(value).toBe('');
    expect(event).toBeDefined();
  });
  it('handles clear button clicks in multi-select mode', function () {
    var selected;
    onInputChange = jest.fn();
    onChange = jest.fn(function (s) {
      selected = s;
    });
    (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(ClearButton, {
      multiple: true,
      onChange: onChange,
      onInputChange: onInputChange
    }));

    _helpers.userEvent.click(_helpers.screen.getByRole('button', {
      name: 'Clear'
    }));

    expect(onChange).toHaveBeenCalledTimes(1);
    expect(onInputChange).toHaveBeenCalledTimes(0);
    expect(selected).toHaveLength(0);
  });
  it('handles clear button clicks in multi-select mode with initial input', function () {
    var event, selected, value;
    onInputChange = jest.fn(function (v, e) {
      value = v;
      event = e;
    });
    onChange = jest.fn(function (s) {
      selected = s;
    }); // Test that any text in the input also gets cleared.

    (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(ClearButton, {
      defaultInputValue: "test",
      multiple: true,
      onChange: onChange,
      onInputChange: onInputChange,
      selected: _data["default"].slice(0, 2)
    }));

    _helpers.userEvent.click(_helpers.screen.getByRole('button', {
      name: 'Clear'
    }));

    expect(onChange).toHaveBeenCalledTimes(1);
    expect(onInputChange).toHaveBeenCalledTimes(1);
    expect(value).toBe('');
    expect(event).toBeDefined();
    expect(selected).toHaveLength(0);
  });
  it('calls `onInputChange` when text is entered in the input', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee51() {
    var input;
    return _regenerator["default"].wrap(function _callee51$(_context51) {
      while (1) {
        switch (_context51.prev = _context51.next) {
          case 0:
            (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, {
              onInputChange: onInputChange
            }));
            input = (0, _helpers.getInput)();

            _helpers.userEvent.type(input, 'z');

            _context51.next = 5;
            return (0, _helpers.waitFor)(function () {
              expect(onInputChange).toHaveBeenCalledTimes(1);
            });

          case 5:
          case "end":
            return _context51.stop();
        }
      }
    }, _callee51);
  })));
  it('`onInputChange` receives an event as the second param', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee52() {
    var event, input;
    return _regenerator["default"].wrap(function _callee52$(_context52) {
      while (1) {
        switch (_context52.prev = _context52.next) {
          case 0:
            (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, {
              onInputChange: function onInputChange(text, e) {
                return event = e;
              }
            }));
            input = (0, _helpers.getInput)();

            _helpers.userEvent.type(input, 'z');

            _context52.next = 5;
            return (0, _helpers.waitFor)(function () {
              expect(event).toBeDefined();
            });

          case 5:
          case "end":
            return _context52.stop();
        }
      }
    }, _callee52);
  })));
  it('calls `onChange` when there is a selection and text is entered', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee53() {
    var selected, input;
    return _regenerator["default"].wrap(function _callee53$(_context53) {
      while (1) {
        switch (_context53.prev = _context53.next) {
          case 0:
            selected = _data["default"].slice(0, 1);
            (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, {
              onChange: onChange,
              onInputChange: onInputChange,
              selected: selected
            }));
            input = (0, _helpers.getInput)();

            _helpers.userEvent.type(input, 'z');

            _context53.next = 6;
            return (0, _helpers.waitFor)(function () {
              expect(onChange).toHaveBeenCalledTimes(1);
            });

          case 6:
            expect(onInputChange).toHaveBeenCalledTimes(1);

          case 7:
          case "end":
            return _context53.stop();
        }
      }
    }, _callee53);
  })));
  it('does not call either when selections are updated via props', function () {
    var selected = _data["default"].slice(0, 1);

    var _render11 = (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, {
      onChange: onChange,
      onInputChange: onInputChange,
      selected: []
    })),
        rerender = _render11.rerender;

    expect(onChange).toHaveBeenCalledTimes(0);
    expect(onInputChange).toHaveBeenCalledTimes(0);
    rerender( /*#__PURE__*/_react["default"].createElement(Default, {
      onChange: onChange,
      onInputChange: onInputChange,
      selected: selected
    }));
    expect(onChange).toHaveBeenCalledTimes(0);
    expect(onInputChange).toHaveBeenCalledTimes(0);
  });
  it('does not call either when `clear()` is called externally', function () {
    var ref = /*#__PURE__*/(0, _react.createRef)();

    var selected = _data["default"].slice(0, 1);

    (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(TestComponent, {
      defaultSelected: selected,
      ref: ref,
      onChange: onChange,
      onInputChange: onInputChange
    }));
    expect((0, _helpers.getInput)()).toHaveValue(selected[0].name);
    ref.current.clear();
    expect((0, _helpers.getInput)()).toHaveValue('');
    expect(onChange).toHaveBeenCalledTimes(0);
    expect(onInputChange).toHaveBeenCalledTimes(0);
  });
});
describe('<Typeahead> input value behaviors', function () {
  var defaultInputValue, defaultSelected, selected;
  beforeEach(function () {
    defaultInputValue = 'This is a default value';
    defaultSelected = _data["default"].slice(0, 1);
    selected = _data["default"].slice(0, 1);
  });
  it("doesn't set a value when there is no default value or selection", function () {
    (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, {
      selected: []
    }));
    expect((0, _helpers.getInput)()).toHaveValue('');
  });
  it('sets an input value based on the `selected` value', function () {
    (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, {
      selected: selected
    }));
    expect((0, _helpers.getInput)()).toHaveValue(selected[0].name);
  });
  it('sets a default initial input value', function () {
    (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, {
      defaultInputValue: defaultInputValue
    }));
    expect((0, _helpers.getInput)()).toHaveValue(defaultInputValue);
  });
  it('sets an input value based on the `defaultSelected` value', function () {
    (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, {
      defaultSelected: defaultSelected
    }));
    expect((0, _helpers.getInput)()).toHaveValue(defaultSelected[0].name);
  });
  it('overrides the default input value if there is a selection', function () {
    (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, {
      defaultInputValue: defaultInputValue,
      selected: selected
    }));
    expect((0, _helpers.getInput)()).toHaveValue(selected[0].name);
  });
});
describe('<Typeahead> with clear button', function () {
  it('does not display a clear button', function () {
    (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(ClearButton, {
      selected: []
    }));
    expect(_helpers.screen.queryByRole('button')).not.toBeInTheDocument();
  });
  it('displays a clear button', function () {
    (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(ClearButton, null));
    expect(_helpers.screen.queryByRole('button')).toBeInTheDocument();
  });
});
/**
 * Some basic tests for the custom menu-rendering use-case.
 * Helps ensure that the context-related logic doesn't break.
 */

describe('<Typeahead> with custom menu', function () {
  it('renders the custom menu', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee54() {
    var items;
    return _regenerator["default"].wrap(function _callee54$(_context54) {
      while (1) {
        switch (_context54.prev = _context54.next) {
          case 0:
            (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(CustomMenu, null));
            (0, _helpers.getInput)().focus();
            _context54.next = 4;
            return (0, _helpers.findItems)();

          case 4:
            items = _context54.sent;
            expect(items[0]).toHaveTextContent('Wyoming');

          case 6:
          case "end":
            return _context54.stop();
        }
      }
    }, _callee54);
  })));
  it('shows the correct hint', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee55() {
    var _render12, container, hint, items;

    return _regenerator["default"].wrap(function _callee55$(_context55) {
      while (1) {
        switch (_context55.prev = _context55.next) {
          case 0:
            _render12 = (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(CustomMenu, null)), container = _render12.container;
            hint = (0, _helpers.getHint)(container);

            _helpers.userEvent.type((0, _helpers.getInput)(), 'u');

            _context55.next = 5;
            return (0, _helpers.findItems)();

          case 5:
            items = _context55.sent;
            expect(items[0]).toHaveTextContent('Utah');
            expect(hint).toHaveValue('utah');

          case 8:
          case "end":
            return _context55.stop();
        }
      }
    }, _callee55);
  })));
  it('selects the correct option', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee56() {
    var onChange, input, items;
    return _regenerator["default"].wrap(function _callee56$(_context56) {
      while (1) {
        switch (_context56.prev = _context56.next) {
          case 0:
            onChange = jest.fn();
            (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(CustomMenu, {
              onChange: onChange
            }));
            input = (0, _helpers.getInput)();
            input.focus();

            _helpers.userEvent.keyboard('{arrowdown}');

            _context56.next = 7;
            return (0, _helpers.findItems)();

          case 7:
            items = _context56.sent;
            expect(items[0]).toHaveTextContent('Wyoming');
            expect(items[0]).toHaveClass('active');

            _helpers.userEvent.keyboard('{enter}');

            expect(onChange).toHaveBeenCalledTimes(1);
            expect(input).toHaveValue('Wyoming');

          case 13:
          case "end":
            return _context56.stop();
        }
      }
    }, _callee56);
  }))); // Integration test to ensure that active index updating works correctly when
  // reshuffling the result set.

  it('correctly handles disabled options', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee57() {
    var options, items;
    return _regenerator["default"].wrap(function _callee57$(_context57) {
      while (1) {
        switch (_context57.prev = _context57.next) {
          case 0:
            options = _data["default"].map(function (state) {
              return state.name === 'Wyoming' ? _objectSpread(_objectSpread({}, state), {}, {
                disabled: true
              }) : state;
            });
            (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(CustomMenu, {
              options: options
            }));
            (0, _helpers.getInput)().focus();

            _helpers.userEvent.keyboard('{arrowdown}'); // Keying down should skip over the first option


            _context57.next = 6;
            return (0, _helpers.findItems)();

          case 6:
            items = _context57.sent;
            expect(items[1]).toHaveClass('active');
            expect(items[1]).toHaveTextContent('Wisconsin');

          case 9:
          case "end":
            return _context57.stop();
        }
      }
    }, _callee57);
  })));
});
describe('State modifiers', function () {
  var defaultState = {
    activeIndex: -1,
    activeItem: undefined,
    initialItem: undefined,
    isFocused: false,
    selected: [],
    showMenu: false,
    shownResults: 100,
    text: ''
  };
  it('calls the clearTypeahead modifier', function () {
    var props = {
      defaultOpen: false,
      defaultSelected: [],
      maxResults: 10
    };

    var state = _objectSpread(_objectSpread({}, defaultState), {}, {
      isFocused: true
    });

    expect((0, _Typeahead2.clearTypeahead)(state, props)).toEqual(_objectSpread(_objectSpread({}, defaultState), {}, {
      isFocused: true,
      shownResults: 10
    }));
  });
  it('calls the clickOrFocusInput modifier', function () {
    var state = _objectSpread(_objectSpread({}, defaultState), {}, {
      isFocused: false,
      showMenu: false
    });

    expect((0, _Typeahead2.clickOrFocusInput)(state)).toEqual(_objectSpread(_objectSpread({}, defaultState), {}, {
      isFocused: true,
      showMenu: true
    }));
  });
  it('calls the getInitialState modifier', function () {
    expect((0, _Typeahead2.getInitialState)({
      defaultInputValue: 'foo',
      defaultOpen: false,
      defaultSelected: [],
      maxResults: 10
    })).toEqual(_objectSpread(_objectSpread({}, defaultState), {}, {
      shownResults: 10,
      text: 'foo'
    }));
    expect((0, _Typeahead2.getInitialState)({
      defaultInputValue: 'foo',
      defaultOpen: true,
      defaultSelected: ['bar', 'foo'],
      maxResults: 10
    })).toEqual(_objectSpread(_objectSpread({}, defaultState), {}, {
      selected: ['bar'],
      showMenu: true,
      shownResults: 10,
      text: 'bar'
    }));
  });
  it('calls the hideMenu modifier', function () {
    var props = {
      defaultSelected: [],
      maxResults: 10
    };
    expect((0, _Typeahead2.hideMenu)(defaultState, props)).toEqual(_objectSpread(_objectSpread({}, defaultState), {}, {
      activeIndex: -1,
      activeItem: undefined,
      initialItem: undefined,
      showMenu: false,
      shownResults: props.maxResults
    }));
  });
  it('calls the toggleMenu modifier', function () {
    var props = {
      defaultSelected: [],
      maxResults: 10
    };
    expect((0, _Typeahead2.toggleMenu)(_objectSpread(_objectSpread({}, defaultState), {}, {
      showMenu: false
    }), props)).toEqual(_objectSpread(_objectSpread({}, defaultState), {}, {
      showMenu: true
    }));
    expect((0, _Typeahead2.toggleMenu)(_objectSpread(_objectSpread({}, defaultState), {}, {
      showMenu: true
    }), props)).toEqual(_objectSpread(_objectSpread({}, defaultState), {}, {
      activeIndex: -1,
      activeItem: undefined,
      initialItem: undefined,
      showMenu: false,
      shownResults: props.maxResults
    }));
  });
});