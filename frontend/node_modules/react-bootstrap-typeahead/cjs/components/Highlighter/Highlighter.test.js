"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _Highlighter = _interopRequireDefault(require("./Highlighter"));

var _helpers = require("../../tests/helpers");

function getMatches(nodes) {
  var arr = Array.from(nodes);
  return arr.filter(function (node) {
    return node.tagName === 'MARK';
  });
}

describe('<Highlighter>', function () {
  it('does not highlight text when there is no search string', function () {
    var _render = (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(_Highlighter["default"], {
      search: ""
    }, "California")),
        container = _render.container;

    var nodes = container.childNodes;
    expect(nodes).toHaveLength(1);
    expect(nodes.item(0)).toHaveTextContent('California');
    expect(getMatches(nodes)).toHaveLength(0);
  });
  it('does not highlight text when there is no match', function () {
    var _render2 = (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(_Highlighter["default"], {
      search: "x"
    }, "California")),
        container = _render2.container;

    expect(getMatches(container.childNodes)).toHaveLength(0);
  });
  it('handles an empty child string', function () {
    // Explicitly set a string as the child.
    // eslint-disable-next-line react/jsx-curly-brace-presence
    var _render3 = (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(_Highlighter["default"], {
      search: "foo"
    }, '')),
        container = _render3.container;

    expect(container.childNodes.item(0)).toHaveTextContent('');
  });
  it('highlights text within a string', function () {
    var _render4 = (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(_Highlighter["default"], {
      search: "i"
    }, "California")),
        container = _render4.container;

    var nodes = container.childNodes;
    var matches = getMatches(nodes); // Output: [Cal, <mark>i</mark>, forn, <mark>i</mark>, a]

    expect(nodes.length).toBe(5);
    expect(nodes.item(0)).toHaveTextContent('Cal');
    expect(matches.length).toBe(2);
    expect(matches[0]).toHaveTextContent('i');
    expect(matches[0]).toHaveClass('rbt-highlight-text');
  });
  it('highlights text at the beginning of a string', function () {
    var _render5 = (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(_Highlighter["default"], {
      search: "cal"
    }, "California")),
        container = _render5.container;

    var nodes = container.childNodes;
    var matches = getMatches(nodes); // Output: [<mark>Cal</mark>, ifornia]

    expect(nodes).toHaveLength(2);
    expect(nodes.item(0)).toHaveTextContent('Cal');
    expect(matches).toHaveLength(1);
    expect(matches[0]).toHaveTextContent('Cal');
  });
  it('adds custom classnames to the highlighted children', function () {
    var _render6 = (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(_Highlighter["default"], {
      highlightClassName: "foo",
      search: "i"
    }, "California")),
        container = _render6.container;

    expect(getMatches(container.childNodes)[0]).toHaveClass('foo');
  });
});