"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

var _react = _interopRequireDefault(require("react"));

var stories = _interopRequireWildcard(require("./Menu.stories"));

var _helpers = require("../../tests/helpers");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var _composeStories = (0, _helpers.composeStories)(stories),
    Default = _composeStories.Default,
    Empty = _composeStories.Empty,
    HeaderAndDivider = _composeStories.HeaderAndDivider;

describe('<Menu>', function () {
  (0, _helpers.generateSnapshots)(stories);
  it('renders a basic menu with menu items', function () {
    (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, null));
    expect((0, _helpers.getMenu)()).toHaveClass('rbt-menu dropdown-menu');
    expect((0, _helpers.getItems)()).toHaveLength(3);
  });
  it('sets the maxHeight and other styles', function () {
    (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, {
      maxHeight: "100px",
      style: {
        backgroundColor: 'red'
      }
    }));
    var menu = (0, _helpers.getMenu)();
    expect(menu).toHaveStyle('background-color: red');
    expect(menu).toHaveStyle('max-height: 100px');
  });
  it('renders an empty label when there are no children', function () {
    var emptyLabel = 'No matches.';
    (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Empty, {
      emptyLabel: emptyLabel
    }));
    var items = (0, _helpers.getItems)();
    expect(items).toHaveLength(1);
    expect(items[0]).toHaveClass('disabled');
    expect(items[0]).toHaveTextContent(emptyLabel);
  });
  it('adds an aria-label attribute to the menu', function () {
    (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, {
      "aria-label": "custom-label"
    }));
    expect((0, _helpers.getMenu)()).toHaveAttribute('aria-label', 'custom-label');
  });
  it('updates the menu position if the input height changes', function () {
    var scheduleUpdate = jest.fn();

    var _render = (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, {
      scheduleUpdate: scheduleUpdate
    })),
        rerender = _render.rerender;

    expect(scheduleUpdate).toHaveBeenCalledTimes(0);
    rerender( /*#__PURE__*/_react["default"].createElement(Default, {
      inputHeight: 1,
      scheduleUpdate: scheduleUpdate
    }));
    expect(scheduleUpdate).toHaveBeenCalledTimes(1);
  });
  it('prevents the input from blurring on mousedown', function () {
    (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(Default, null)); // `false` means e.preventDefault was called.

    expect(_helpers.fireEvent.mouseDown((0, _helpers.getMenu)())).toBe(false);
  });
  it('checks the menu header and divider', function () {
    (0, _helpers.render)( /*#__PURE__*/_react["default"].createElement(HeaderAndDivider, null));

    var header = _helpers.screen.getByRole('heading');

    expect(header.tagName).toBe('DIV');
    expect(header).toHaveClass('dropdown-header');
    expect(header).toHaveTextContent('This is a menu header');

    var divider = _helpers.screen.getByRole('separator');

    expect(divider.tagName).toBe('DIV');
    expect(divider).toHaveClass('dropdown-divider');
  });
});