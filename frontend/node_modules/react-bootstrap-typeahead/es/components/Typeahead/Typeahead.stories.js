import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/* eslint-disable sort-keys,import/no-extraneous-dependencies */
import React, { useState } from 'react';
import { InputGroup } from 'react-bootstrap';
import Typeahead from './Typeahead';
import Menu from '../Menu';
import MenuItem from '../MenuItem';
import options from '../../tests/data';
import { noop } from '../../tests/helpers';
export default {
  title: 'Components/Typeahead',
  component: Typeahead,
  argTypes: {
    align: {
      options: ['justify', 'left', 'right'],
      control: {
        type: 'radio'
      }
    },
    disabled: {
      control: {
        type: 'boolean'
      }
    },
    size: {
      options: ['default', 'sm', 'lg'],
      control: {
        type: 'radio'
      }
    }
  },
  parameters: {
    actions: {
      argTypesRegex: '^on.*'
    }
  }
};
var defaultProps = {
  allowNew: false,
  clearButton: false,
  flip: true,
  id: 'rbt-id',
  isLoading: false,
  labelKey: 'name',
  multiple: false,
  onBlur: noop,
  onChange: noop,
  onFocus: noop,
  onInputChange: noop,
  onKeyDown: noop,
  options: options,
  placeholder: 'Choose a state...',
  positionFixed: true
};

var Template = function Template(args) {
  return /*#__PURE__*/React.createElement(Typeahead, args);
};

export var Default = Template.bind({});
Default.args = _objectSpread({}, defaultProps);
export var MultiSelect = Template.bind({});
MultiSelect.args = _objectSpread(_objectSpread({}, defaultProps), {}, {
  defaultSelected: options.slice(0, 4),
  multiple: true
});
export var ClearButton = Template.bind({});
ClearButton.args = _objectSpread(_objectSpread({}, defaultProps), {}, {
  clearButton: true,
  defaultSelected: options.slice(0, 1)
});
export var LoadingState = Template.bind({});
LoadingState.args = _objectSpread(_objectSpread({}, defaultProps), {}, {
  isLoading: true
});
export var Pagination = Template.bind({});
Pagination.args = _objectSpread(_objectSpread({}, defaultProps), {}, {
  maxResults: 10,
  paginate: true
});
export var AllowNew = Template.bind({});
AllowNew.args = _objectSpread(_objectSpread({}, defaultProps), {}, {
  allowNew: true
});
export var CustomMenu = Template.bind({});
CustomMenu.args = _objectSpread(_objectSpread({}, defaultProps), {}, {
  renderMenu: function renderMenu(results, menuProps) {
    return /*#__PURE__*/React.createElement(Menu, _extends({}, menuProps, {
      inputHeight: 0,
      scheduleUpdate: noop
    }), results.slice().reverse().map(function (r, index) {
      return (
        /*#__PURE__*/
        // @ts-ignore
        React.createElement(MenuItem, {
          key: r.name,
          option: r,
          position: index
        }, // @ts-ignore
        r.name)
      );
    }));
  }
});
export var InputGrouping = function InputGrouping(args) {
  return /*#__PURE__*/React.createElement(InputGroup, {
    size: args.size
  }, /*#__PURE__*/React.createElement(InputGroup.Text, null, "$"), /*#__PURE__*/React.createElement(Typeahead, args), /*#__PURE__*/React.createElement(InputGroup.Text, null, ".00"));
};
InputGrouping.args = _objectSpread({}, defaultProps);
export var Controlled = function Controlled(args) {
  var _useState = useState(args.selected || []),
      _useState2 = _slicedToArray(_useState, 2),
      selected = _useState2[0],
      setSelected = _useState2[1];

  return /*#__PURE__*/React.createElement(Typeahead, _extends({}, args, {
    onChange: setSelected,
    selected: selected
  }));
};
Controlled.args = _objectSpread({}, defaultProps);