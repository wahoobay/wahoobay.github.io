import React from 'react';
import * as stories from './TypeaheadInputMulti.stories';
import { composeStories, fireEvent, generateSnapshots, getInput, getTokens, render, userEvent } from '../../tests/helpers';

var _composeStories = composeStories(stories),
    Default = _composeStories.Default,
    Disabled = _composeStories.Disabled;

describe('<TypeaheadInputMulti>', function () {
  generateSnapshots(stories);
  it('renders a multi-select input with tokens', function () {
    var _render = render( /*#__PURE__*/React.createElement(Default, null)),
        container = _render.container; // Find the token close buttons as a proxy for the token itself.


    expect(getTokens(container)).toHaveLength(3);
  });
  it('focuses the input', function () {
    var _render2 = render( /*#__PURE__*/React.createElement(Default, null)),
        container = _render2.container; // Test clicking the container, which forwards the click to the input.


    userEvent.click(container.firstElementChild);
    expect(getInput()).toHaveFocus();
  });
  it('does not focus a disabled input', function () {
    var _render3 = render( /*#__PURE__*/React.createElement(Disabled, null)),
        container = _render3.container;

    var input = getInput();
    expect(input).toBeDisabled(); // Test clicking the container, which forwards the click to the input.

    userEvent.click(container.firstElementChild);
    expect(input).not.toHaveFocus();
    userEvent.click(input);
    expect(input).not.toHaveFocus();
  });
  it('prevents clicks on the input from bubbling', function () {
    var onClick = jest.fn();
    render( /*#__PURE__*/React.createElement(Default, {
      onClick: onClick,
      value: "calif"
    }));
    var input = getInput();
    input.focus();
    input.selectionStart = 2; // userEvent.click triggers the wrong behavior for some reason.

    fireEvent.click(input); // Cursor shouldn't move when the input is clicked once.

    expect(onClick).toHaveBeenCalledTimes(1);
    expect(input.selectionStart).toBe(2);
  });
  it('calls the keydown handler', function () {
    var onKeyDown = jest.fn();
    render( /*#__PURE__*/React.createElement(Default, {
      onKeyDown: onKeyDown
    }));
    getInput().focus();
    userEvent.keyboard('{enter}');
    expect(onKeyDown).toHaveBeenCalledTimes(1);
  });
  it('focuses the last token', function () {
    var _render4 = render( /*#__PURE__*/React.createElement(Default, null)),
        container = _render4.container;

    getInput().focus();
    userEvent.keyboard('{backspace}');
    var tokens = getTokens(container);
    var lastToken = tokens[tokens.length - 1];
    expect(lastToken).toHaveFocus();
  });
  it('does not focus the last token when the input has a value', function () {
    render( /*#__PURE__*/React.createElement(Default, {
      value: "foo"
    }));
    var input = getInput();
    input.focus();
    userEvent.keyboard('{backspace}');
    expect(input).toHaveFocus();
  });
});