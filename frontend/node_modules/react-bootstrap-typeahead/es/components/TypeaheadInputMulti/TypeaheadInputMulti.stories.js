import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _extends from "@babel/runtime/helpers/extends";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["hintText"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/* eslint-disable sort-keys,import/no-extraneous-dependencies */
import React, { useState } from 'react';
import Token from '../Token';
import TypeaheadInputMulti from './TypeaheadInputMulti';
import options from '../../tests/data';
import { HintProvider, noop } from '../../tests/helpers';
export default {
  title: 'Components/TypeaheadInputMulti',
  component: TypeaheadInputMulti
};
var selected = options.slice(1, 4);
var defaultProps = {
  children: selected.map(function (option) {
    return /*#__PURE__*/React.createElement(Token, {
      key: option.name,
      option: option,
      onRemove: noop
    }, option.name);
  }),
  selected: selected
};

var Template = function Template(_ref) {
  var _ref$hintText = _ref.hintText,
      hintText = _ref$hintText === void 0 ? '' : _ref$hintText,
      args = _objectWithoutProperties(_ref, _excluded);

  var _useState = useState(args.value),
      _useState2 = _slicedToArray(_useState, 2),
      value = _useState2[0],
      setValue = _useState2[1];

  var _useState3 = useState(null),
      _useState4 = _slicedToArray(_useState3, 2),
      inputNode = _useState4[0],
      setInputNode = _useState4[1];

  return /*#__PURE__*/React.createElement(HintProvider, {
    hintText: hintText,
    inputNode: inputNode
  }, /*#__PURE__*/React.createElement(TypeaheadInputMulti, _extends({}, args, {
    inputRef: setInputNode,
    onChange: function onChange(e) {
      return setValue(e.target.value);
    },
    referenceElementRef: noop,
    value: value
  })));
};

export var Default = Template.bind({});
Default.args = _objectSpread({}, defaultProps);
export var FocusState = Template.bind({});
FocusState.args = _objectSpread(_objectSpread({}, defaultProps), {}, {
  className: 'focus'
});
export var Disabled = Template.bind({});
Disabled.args = _objectSpread(_objectSpread({}, defaultProps), {}, {
  children: selected.map(function (option) {
    return /*#__PURE__*/React.createElement(Token, {
      disabled: true,
      key: option.name,
      option: option,
      onRemove: noop
    }, option.name);
  }),
  disabled: true
});
export var Small = Template.bind({});
Small.args = _objectSpread(_objectSpread({}, defaultProps), {}, {
  size: 'sm'
});
export var Large = Template.bind({});
Large.args = _objectSpread(_objectSpread({}, defaultProps), {}, {
  size: 'lg'
});
export var Valid = Template.bind({});
Valid.args = _objectSpread(_objectSpread({}, defaultProps), {}, {
  className: 'focus',
  isValid: true
});
export var Invalid = Template.bind({});
Invalid.args = _objectSpread(_objectSpread({}, defaultProps), {}, {
  className: 'focus',
  isInvalid: true
});
export var WithHint = Template.bind({});
WithHint.args = _objectSpread(_objectSpread({}, defaultProps), {}, {
  hintText: 'california',
  value: 'cali'
});