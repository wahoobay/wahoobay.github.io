import React from 'react';
import * as stories from './Token.stories';
import { composeStories, generateSnapshots, render, screen, userEvent } from '../../tests/helpers';
var ACTIVE_CLASS = 'rbt-token-active';
var DISABLED_CLASS = 'rbt-token-disabled';
var REMOVEABLE_CLASS = 'rbt-token-removeable';

var _composeStories = composeStories(stories),
    Anchor = _composeStories.Anchor,
    Disabled = _composeStories.Disabled,
    Interactive = _composeStories.Interactive,
    Static = _composeStories.Static;

describe('<Token>', function () {
  generateSnapshots(stories);
  it('renders non-removeable tokens', function () {
    render( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Static, null), /*#__PURE__*/React.createElement(Anchor, null), /*#__PURE__*/React.createElement(Disabled, null)));
    expect(screen.queryAllByRole('button').length).toBe(0);
  });
  it('renders a removeable token', function () {
    var onRemove = jest.fn();

    var _render = render( /*#__PURE__*/React.createElement(Interactive, {
      onRemove: onRemove
    })),
        container = _render.container;

    var token = container.firstChild;
    expect(token).toHaveClass(REMOVEABLE_CLASS);
    var closeButton = screen.getByRole('button');
    userEvent.click(closeButton);
    expect(onRemove).toHaveBeenCalledTimes(1);
  });
  it('makes disabled tokens non-interactive', function () {
    var _render2 = render( /*#__PURE__*/React.createElement(Disabled, {
      href: "/path/to/some/url"
    })),
        container = _render2.container;

    var token = container.firstChild;
    expect(token.tagName).toBe('DIV');
    expect(token).not.toHaveAttribute('href');
    expect(token).toHaveClass(DISABLED_CLASS);
  });
  it('handles events', function () {
    var onBlur = jest.fn();
    var onClick = jest.fn();
    var onFocus = jest.fn();
    var onRemove = jest.fn();

    var _render3 = render( /*#__PURE__*/React.createElement(Interactive, {
      onBlur: onBlur,
      onClick: onClick,
      onFocus: onFocus,
      onRemove: onRemove
    })),
        container = _render3.container;

    var token = container.firstChild;
    expect(token).not.toHaveClass(ACTIVE_CLASS);
    token.focus();
    expect(onFocus).toHaveBeenCalledTimes(1);
    expect(token).toHaveClass(ACTIVE_CLASS);
    token.blur();
    expect(onBlur).toHaveBeenCalledTimes(1);
    expect(token).not.toHaveClass(ACTIVE_CLASS);
    userEvent.click(token);
    expect(onClick).toHaveBeenCalledTimes(1);
    expect(onFocus).toHaveBeenCalledTimes(2);
    expect(token).toHaveClass(ACTIVE_CLASS); // `onRemove` called only when token is active/focused.

    token.blur();
    userEvent.keyboard('{backspace}');
    expect(onRemove).toHaveBeenCalledTimes(0);
    token.focus();
    userEvent.keyboard('{backspace}');
    expect(onRemove).toHaveBeenCalledTimes(1); // Other events are ignored.

    userEvent.keyboard('{enter}');
    expect(onRemove).toHaveBeenCalledTimes(1);
  });
});