import _extends from "@babel/runtime/helpers/extends";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["hintText"];

/* eslint-disable sort-keys,import/no-extraneous-dependencies */
import React, { useState } from 'react';
import TypeaheadInputSingle from './TypeaheadInputSingle';
import { HintProvider, noop } from '../../tests/helpers';
export default {
  title: 'Components/TypeaheadInputSingle',
  component: TypeaheadInputSingle
};

var Template = function Template(_ref) {
  var _ref$hintText = _ref.hintText,
      hintText = _ref$hintText === void 0 ? '' : _ref$hintText,
      args = _objectWithoutProperties(_ref, _excluded);

  var _useState = useState(null),
      _useState2 = _slicedToArray(_useState, 2),
      inputNode = _useState2[0],
      setInputNode = _useState2[1];

  return /*#__PURE__*/React.createElement(HintProvider, {
    hintText: hintText,
    inputNode: inputNode
  }, /*#__PURE__*/React.createElement(TypeaheadInputSingle, _extends({}, args, {
    inputRef: setInputNode,
    referenceElementRef: noop
  })));
};

export var Default = Template.bind({});
Default.args = {
  placeholder: 'This is a default input...'
};
export var Disabled = Template.bind({});
Disabled.args = {
  disabled: true,
  placeholder: 'This is a disabled input...'
};
export var Small = Template.bind({});
Small.args = {
  placeholder: 'This is a small input...',
  size: 'sm'
};
export var Large = Template.bind({});
Large.args = {
  placeholder: 'This is a large input...',
  size: 'lg'
};
export var Valid = Template.bind({});
Valid.args = {
  placeholder: 'This is a valid input...',
  isValid: true
};
export var Invalid = Template.bind({});
Invalid.args = {
  placeholder: 'This is an invalid input...',
  isInvalid: true
};
export var WithHint = Template.bind({});
WithHint.args = {
  hintText: 'California',
  onChange: noop,
  value: 'Ca'
};