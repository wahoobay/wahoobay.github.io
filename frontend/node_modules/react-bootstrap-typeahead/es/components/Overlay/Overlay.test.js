import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import React from 'react';
import { getModifiers, getPlacement } from './Overlay';
import * as stories from './Overlay.stories';
import { composeStories, generateSnapshots, getMenu, render, screen, waitFor } from '../../tests/helpers';

var _composeStories = composeStories(stories),
    Default = _composeStories.Default;

describe('<Overlay>', function () {
  generateSnapshots(stories);
  it('renders the overlay', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            render( /*#__PURE__*/React.createElement(Default, null));
            _context.next = 3;
            return waitFor(function () {
              expect(getMenu()).toBeInTheDocument();
            });

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })));
  it('does not render the overlay when `isMenuShown=false`', function () {
    render( /*#__PURE__*/React.createElement(Default, {
      isMenuShown: false
    }));
    expect(screen.queryByRole('listbox')).not.toBeInTheDocument();
  });
  it('updates the positioning type', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
    var _render, rerender;

    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            // The story uses fixed positioning by default.
            _render = render( /*#__PURE__*/React.createElement(Default, null)), rerender = _render.rerender;
            _context2.next = 3;
            return waitFor(function () {
              expect(getMenu()).toHaveStyle('position: fixed');
            });

          case 3:
            rerender( /*#__PURE__*/React.createElement(Default, {
              positionFixed: false
            }));
            _context2.next = 6;
            return waitFor(function () {
              expect(getMenu()).toHaveStyle('position: absolute');
            });

          case 6:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  })));
});
describe('Overlay placement', function () {
  it('computes the placement string', function () {
    var permutations = [{
      props: {
        align: 'right',
        dropup: false
      },
      received: 'bottom-end'
    }, {
      props: {
        align: 'left',
        dropup: false
      },
      received: 'bottom-start'
    }, {
      props: {
        align: 'justify',
        dropup: false
      },
      received: 'bottom-start'
    }, {
      props: {
        align: 'foo',
        dropup: false
      },
      received: 'bottom-start'
    }, {
      props: {
        align: 'right',
        dropup: true
      },
      received: 'top-end'
    }, {
      props: {
        align: 'left',
        dropup: true
      },
      received: 'top-start'
    }, {
      props: {
        align: 'justify',
        dropup: true
      },
      received: 'top-start'
    }, {
      props: {
        align: 'foo',
        dropup: true
      },
      received: 'top-start'
    }];
    permutations.forEach(function (_ref3) {
      var props = _ref3.props,
          received = _ref3.received;
      expect(getPlacement(props)).toBe(received);
    });
  });
});
describe('Overlay modifiers', function () {
  it('sets the `flip` modifier', function () {
    var props = {
      align: 'justify',
      flip: false
    };

    var selector = function selector(_ref4) {
      var name = _ref4.name;
      return name === 'flip';
    };

    expect(getModifiers(props).find(selector).enabled).toBe(false);
    props.flip = true;
    expect(getModifiers(props).find(selector).enabled).toBe(true);
  });
  it('conditionally adds the `setWidth` modifier', function () {
    var props = {
      align: 'justify',
      flip: false
    };
    var modifiers = getModifiers(props);
    expect(modifiers).toHaveLength(2);
    expect(modifiers.find(function (_ref5) {
      var name = _ref5.name;
      return name === 'setPopperWidth';
    })).toBeTruthy();
    props.align = 'left';
    expect(getModifiers(props)).toHaveLength(1);
    props.align = 'right';
    expect(getModifiers(props)).toHaveLength(1);
  });
});