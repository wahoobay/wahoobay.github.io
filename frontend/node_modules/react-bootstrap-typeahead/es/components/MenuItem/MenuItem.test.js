import React from 'react';
import * as baseStories from './BaseMenuItem.stories';
import * as stories from './MenuItem.stories';
import { composeStories, generateSnapshots, screen, render, userEvent } from '../../tests/helpers';

var _composeStories = composeStories(baseStories),
    BaseDefault = _composeStories.Default,
    Active = _composeStories.Active,
    Disabled = _composeStories.Disabled;

var _composeStories2 = composeStories(stories),
    Default = _composeStories2.Default;

describe('<BaseMenuItem>', function () {
  generateSnapshots(baseStories);
  it('triggers an event when clicked', function () {
    var onClick = jest.fn();
    render( /*#__PURE__*/React.createElement(BaseDefault, {
      onClick: onClick
    }));
    var item = screen.getByRole('link');
    userEvent.click(item);
    expect(onClick).toHaveBeenCalledTimes(1);
  });
  it('renders a default href', function () {
    render( /*#__PURE__*/React.createElement(BaseDefault, null));
    expect(screen.getByRole('link')).toHaveAttribute('href', '#');
  });
  it('renders an href passed to the MenuItem', function () {
    var href = '/some/link';
    render( /*#__PURE__*/React.createElement(BaseDefault, {
      href: href
    }));
    expect(screen.getByRole('link')).toHaveAttribute('href', href);
  });
  it('renders an active base menu item', function () {
    render( /*#__PURE__*/React.createElement(Active, null));
    expect(screen.getByRole('link')).toHaveClass('active');
  });
  it('renders a disabled base menu item', function () {
    var onClick = jest.fn();
    render( /*#__PURE__*/React.createElement(Disabled, {
      disabled: true,
      onClick: onClick
    }));
    var item = screen.getByRole('link');
    userEvent.click(item);
    expect(item).toHaveClass('disabled');
    expect(onClick).toHaveBeenCalledTimes(0);
  });
});
describe('<MenuItem>', function () {
  generateSnapshots(stories);
  it('renders a MenuItem', function () {
    render( /*#__PURE__*/React.createElement(Default, null));
    var option = screen.getByRole('option');
    expect(option).toHaveAttribute('aria-label', 'test label');
    expect(option).toHaveAttribute('aria-selected', 'false');
    expect(option).toHaveAttribute('id', 'test-id-item-0');
  });
  it('conditionally calls `onInitialItemChange`', function () {
    var onInitialItemChange = jest.fn();
    var context = {
      onInitialItemChange: onInitialItemChange
    };

    var _render = render( /*#__PURE__*/React.createElement(Default, {
      context: context,
      props: {
        position: 1
      }
    })),
        rerender = _render.rerender;

    expect(onInitialItemChange).toHaveBeenCalledTimes(0);
    rerender( /*#__PURE__*/React.createElement(Default, {
      context: context,
      props: {
        position: 0
      }
    }));
    expect(onInitialItemChange).toHaveBeenCalledTimes(1);
  });
  it('conditionally calls `onInitialItemChange`', function () {
    var onActiveItemChange = jest.fn();
    var context = {
      activeIndex: 1,
      onActiveItemChange: onActiveItemChange
    };

    var _render2 = render( /*#__PURE__*/React.createElement(Default, {
      context: context,
      props: {
        position: 0
      }
    })),
        rerender = _render2.rerender;

    expect(onActiveItemChange).toHaveBeenCalledTimes(0);
    rerender( /*#__PURE__*/React.createElement(Default, {
      context: context,
      props: {
        position: 1
      }
    }));
    expect(onActiveItemChange).toHaveBeenCalledTimes(1);
  });
  it('changes the active state of the menu item', function () {
    render( /*#__PURE__*/React.createElement(Default, {
      context: {
        activeIndex: 0
      }
    }));
    var option = screen.getByRole('option');
    expect(option).toHaveClass('active');
    expect(option).toHaveAttribute('aria-selected', 'true');
  });
  it('sets the active state if it is the only result', function () {
    render( /*#__PURE__*/React.createElement(Default, {
      context: {
        isOnlyResult: true
      }
    }));
    var option = screen.getByRole('option');
    expect(option).toHaveClass('active');
    expect(option).toHaveAttribute('aria-selected', 'true');
  });
  it('calls the click handlers', function () {
    var onClick = jest.fn();
    var onMenuItemClick = jest.fn();
    render( /*#__PURE__*/React.createElement(Default, {
      context: {
        onMenuItemClick: onMenuItemClick
      },
      props: {
        onClick: onClick
      }
    }));
    userEvent.click(screen.getByRole('option'));
    expect(onClick).toHaveBeenCalledTimes(1);
    expect(onMenuItemClick).toHaveBeenCalledTimes(1);
  });
  it('renders a disabled menu item', function () {
    var onClick = jest.fn();
    render( /*#__PURE__*/React.createElement(Default, {
      props: {
        disabled: true,
        onClick: onClick
      }
    }));
    var item = screen.getByRole('option');
    userEvent.click(item);
    expect(item).toHaveClass('disabled');
    expect(onClick).toHaveBeenCalledTimes(0);
  });
});