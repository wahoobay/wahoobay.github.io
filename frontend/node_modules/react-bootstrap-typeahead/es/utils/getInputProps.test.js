import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import getInputProps from './getInputProps';
import { noop } from '../tests/helpers';
var baseProps = {
  activeIndex: -1,
  id: 'id',
  isFocused: false,
  isMenuShown: false,
  multiple: false
};

var baseMultiProps = _objectSpread(_objectSpread({}, baseProps), {}, {
  multiple: true,
  onRemove: noop
});

var baseReceivedProps = {
  'aria-activedescendant': undefined,
  'aria-autocomplete': 'both',
  'aria-expanded': false,
  'aria-haspopup': 'listbox',
  'aria-owns': undefined,
  autoComplete: 'off',
  className: '',
  onClick: undefined,
  onFocus: undefined,
  placeholder: undefined,
  role: 'combobox',
  type: 'text'
};

var baseReceivedMultiProps = _objectSpread(_objectSpread({}, baseReceivedProps), {}, {
  'aria-autocomplete': 'list',
  'aria-expanded': undefined,
  inputClassName: undefined,
  onRemove: noop,
  role: undefined
});

describe('getInputProps', function () {
  it('receives single-select input props', function () {
    var inputProps = getInputProps(baseProps)();
    expect(inputProps).toEqual(baseReceivedProps);
    inputProps = getInputProps(_objectSpread(_objectSpread({}, baseProps), {}, {
      activeIndex: 0,
      isFocused: true,
      isMenuShown: true
    }))({
      className: 'foo'
    });
    expect(inputProps).toEqual(_objectSpread(_objectSpread({}, baseReceivedProps), {}, {
      'aria-activedescendant': 'id-item-0',
      'aria-expanded': true,
      'aria-owns': 'id',
      className: 'foo focus'
    }));
  });
  it('receives multi-select input props', function () {
    var inputProps = getInputProps(baseMultiProps)();
    expect(inputProps).toEqual(baseReceivedMultiProps);
    inputProps = getInputProps(_objectSpread(_objectSpread({}, baseMultiProps), {}, {
      isFocused: true
    }))({
      className: 'foo'
    });
    expect(inputProps).toEqual(_objectSpread(_objectSpread({}, baseReceivedMultiProps), {}, {
      className: 'focus',
      inputClassName: 'foo'
    }));
  });
});