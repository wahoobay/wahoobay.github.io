import _defineProperty from "@babel/runtime/helpers/defineProperty";
import getOptionLabel from './getOptionLabel';
import getStringLabelKey from './getStringLabelKey';

var labelKeyFn = function labelKeyFn(o) {
  return o.name;
};

describe('getOptionLabel', function () {
  var name, option;
  beforeEach(function () {
    name = 'California';
    option = {
      name: name
    };
  });
  it('returns a string when it receives a string `option` value', function () {
    var optionLabel = getOptionLabel(name, '');
    expect(optionLabel).toBe(name);
  });
  it('returns a string when it receives a `labelKey` function', function () {
    var optionLabel = getOptionLabel(option, labelKeyFn);
    expect(optionLabel).toBe(name);
  });
  it('returns a string when it receives a `labelKey` string', function () {
    var optionLabel = getOptionLabel(option, 'name');
    expect(optionLabel).toBe(name);
  });
  it('handles custom and pagination options', function () {
    var _customOption, _paginationOption;

    var customOption = (_customOption = {}, _defineProperty(_customOption, getStringLabelKey(labelKeyFn), 'foo'), _defineProperty(_customOption, "customOption", true), _customOption);
    var paginationOption = (_paginationOption = {}, _defineProperty(_paginationOption, getStringLabelKey(labelKeyFn), 'bar'), _defineProperty(_paginationOption, "paginationOption", true), _paginationOption);
    expect(getOptionLabel(customOption, labelKeyFn)).toBe('foo');
    expect(getOptionLabel(paginationOption, labelKeyFn)).toBe('bar');
  });
  it('gives precedence to `labelKey` when it is a function', function () {
    var customLabel = 'Custom Label';
    var optionLabel = getOptionLabel(name, function () {
      return customLabel;
    });
    expect(optionLabel).toBe(customLabel);
  });
  it('throws an error when an invalid option is encountered', function () {
    var willThrow = function willThrow() {
      return getOptionLabel([], 'name');
    };

    expect(willThrow).toThrowError(Error);
  });
  it('throws an error when `option` is an object and no labelkey is specified', function () {
    var willThrow = function willThrow() {
      return getOptionLabel(option);
    };

    expect(willThrow).toThrowError(Error);
  });
});