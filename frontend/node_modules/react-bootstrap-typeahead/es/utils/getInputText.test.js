import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import getInputText from './getInputText';
import options from '../tests/data';
var labelKey = 'name';
var baseArgs = {
  activeItem: null,
  labelKey: labelKey,
  multiple: false,
  selected: [],
  text: ''
};
describe('getInputText', function () {
  it('returns an empty string when no text is entered', function () {
    var inputText = getInputText(baseArgs);
    expect(inputText).toBe('');
  });
  it('returns the input text in multiple mode', function () {
    var text = 'Cali';
    var inputText = getInputText(_objectSpread(_objectSpread({}, baseArgs), {}, {
      multiple: true,
      text: text
    }));
    expect(inputText).toBe(text);
  });
  it('returns the active option label in single-select mode', function () {
    var name = 'California';
    var inputText = getInputText(_objectSpread(_objectSpread({}, baseArgs), {}, {
      activeItem: {
        name: name
      }
    }));
    expect(inputText).toBe(name);
  });
  it('returns the active option label in multi-select mode', function () {
    var name = 'California';
    var inputText = getInputText(_objectSpread(_objectSpread({}, baseArgs), {}, {
      activeItem: {
        name: name
      },
      multiple: true
    }));
    expect(inputText).toBe(name);
  });
  it('returns the selected item label in single-select mode', function () {
    var selected = options.slice(0, 1);
    var inputText = getInputText(_objectSpread(_objectSpread({}, baseArgs), {}, {
      selected: selected
    }));
    expect(inputText).toBe(selected[0][labelKey]);
  });
  it('does not return the selected item label in multi-select mode', function () {
    var inputText = getInputText(_objectSpread(_objectSpread({}, baseArgs), {}, {
      multiple: true,
      selected: options.slice(0, 1)
    }));
    expect(inputText).toBe('');
  });
});