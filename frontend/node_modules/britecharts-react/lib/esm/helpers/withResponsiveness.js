var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

import React from 'react';
import optimizedResize from './optimizedResize.js';

export default function (Component) {
    return class WithResponsiveness extends React.PureComponent {
        constructor(props) {
            super(props);

            this.state = {
                width: 500
            };
            this.setRef = this.setRef.bind(this);
            this.updateSize = this.updateSize.bind(this);
        }

        componentDidMount() {
            optimizedResize.addHorizontal(this.updateSize);

            this.updateSize();
        }

        componentWillUnmount() {
            optimizedResize.clearAll();

            this.updateSize();
        }

        setRef(componentNode) {
            this.rootNode = componentNode;
        }

        updateSize() {
            const width = this.rootNode.clientWidth;

            if (width !== this.state.width) {
                this.setState({
                    width
                });
            }
        }

        render() {
            return React.createElement(
                'div',
                { className: 'responsive-container', ref: this.setRef },
                React.createElement(Component, _extends({ width: this.state.width }, this.props))
            );
        }
    };
}