{"version":3,"sources":["pages/forms/Wizard.js","components/PageTitle.js","components/VerticalForm.js","components/FormInput.js"],"names":["BasicWizard","Body","className","id","render","next","Group","as","Row","Label","htmlFor","column","md","Control","type","name","placeholder","defaultValue","onClick","variant","previous","sm","Check","Input","WizardWithProgressbar","step","steps","animated","striped","now","indexOf","length","WizardWithFormValidation","validationSchema","yupResolver","yup","shape","email","required","password","checkbox","oneOf","validationSchema2","firstname","lastname","onSubmit","event","values","resolver","label","containerClass","FormWizard","breadCrumbItems","path","active","title","xl","lg","PageTitle","props","listProps","Item","href","map","item","index","VerticalForm","defaultValues","children","formClass","methods","useForm","handleSubmit","register","control","errors","formState","noValidate","Array","isArray","child","React","createElement","key","PasswordInput","refCallback","useState","showPassword","setShowPassword","InputGroup","Form","ref","r","isInvalid","autoComplete","classNames","data-password","FormInput","labelClassName","otherProps","comp","Feedback","Select"],"mappings":"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","file":"static/js/120.1bb3f1b2.chunk.js","sourcesContent":["// @flow\nimport React from 'react';\nimport { Row, Col, Card, Form, Button, ProgressBar } from 'react-bootstrap';\nimport { Wizard, Steps, Step } from 'react-albus';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\n\n// components\nimport PageTitle from '../../components/PageTitle';\nimport { VerticalForm, FormInput } from '../../components/';\n\nconst BasicWizard = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title mb-3\"> Basic Wizard</h4>\n\n                <Wizard>\n                    <Steps>\n                        <Step\n                            id=\"login\"\n                            render={({ next }) => (\n                                <Form>\n                                    <Form.Group as={Row} className=\"mb-3\">\n                                        <Form.Label htmlFor=\"exampleEmail\" column md={3}>\n                                            Email\n                                        </Form.Label>\n                                        <Col md={9}>\n                                            <Form.Control\n                                                type=\"email\"\n                                                name=\"exampleEmail\"\n                                                id=\"exampleEmail\"\n                                                placeholder=\"Enter email\"\n                                            />\n                                        </Col>\n                                    </Form.Group>\n\n                                    <Form.Group as={Row} className=\"mb-3\">\n                                        <Form.Label htmlFor=\"examplePassword\" column md={3}>\n                                            Password\n                                        </Form.Label>\n                                        <Col md={9}>\n                                            <Form.Control\n                                                type=\"password\"\n                                                name=\"examplePassword\"\n                                                id=\"examplePassword\"\n                                                placeholder=\"password placeholder\"\n                                                defaultValue=\"12345\"\n                                            />\n                                        </Col>\n                                    </Form.Group>\n\n                                    <Form.Group as={Row} className=\"mb-3\">\n                                        <Form.Label htmlFor=\"examplerePassword\" column md={3}>\n                                            Re-Password\n                                        </Form.Label>\n                                        <Col md={9}>\n                                            <Form.Control\n                                                type=\"password\"\n                                                name=\"exampleRepassword\"\n                                                id=\"examplerePassword\"\n                                                placeholder=\"password\"\n                                                defaultValue=\"12345\"\n                                            />\n                                        </Col>\n                                    </Form.Group>\n\n                                    <ul className=\"list-inline wizard mb-0\">\n                                        <li className=\"next list-inline-item float-end\">\n                                            <Button onClick={next} variant=\"success\">\n                                                Next\n                                            </Button>\n                                        </li>\n                                    </ul>\n                                </Form>\n                            )}\n                        />\n                        <Step\n                            id=\"gandalf\"\n                            render={({ next, previous }) => (\n                                <Form>\n                                    <Form.Group as={Row} className=\"mb-3\">\n                                        <Form.Label htmlFor=\"fname\" column md={3}>\n                                            First Name\n                                        </Form.Label>\n                                        <Col md={9}>\n                                            <Form.Control\n                                                type=\"text\"\n                                                name=\"fname\"\n                                                id=\"fname\"\n                                                placeholder=\"Enter first name\"\n                                            />\n                                        </Col>\n                                    </Form.Group>\n\n                                    <Form.Group as={Row} className=\"mb-3\">\n                                        <Form.Label htmlFor=\"lname\" column md={3}>\n                                            Last Name\n                                        </Form.Label>\n                                        <Col md={9}>\n                                            <Form.Control\n                                                type=\"text\"\n                                                name=\"lname\"\n                                                id=\"lname\"\n                                                placeholder=\"enter last name\"\n                                            />\n                                        </Col>\n                                    </Form.Group>\n\n                                    <Form.Group as={Row} className=\"mb-3\">\n                                        <Form.Label htmlFor=\"phone\" column md={3}>\n                                            Phone Number\n                                        </Form.Label>\n                                        <Col md={9}>\n                                            <Form.Control\n                                                type=\"text\"\n                                                name=\"phone\"\n                                                id=\"phone\"\n                                                placeholder=\"enter phone number\"\n                                            />\n                                        </Col>\n                                    </Form.Group>\n\n                                    <ul className=\"list-inline wizard mb-0\">\n                                        <li className=\"previous list-inline-item\">\n                                            <Button onClick={previous} variant=\"info\">\n                                                Previous\n                                            </Button>\n                                        </li>\n                                        <li className=\"next list-inline-item float-end\">\n                                            <Button onClick={next} variant=\"success\">\n                                                Next\n                                            </Button>\n                                        </li>\n                                    </ul>\n                                </Form>\n                            )}\n                        />\n                        <Step\n                            id=\"dumbledore\"\n                            render={({ previous }) => (\n                                <Row>\n                                    <Col sm={12}>\n                                        <div className=\"text-center\">\n                                            <h2 className=\"mt-0\">\n                                                <i className=\"mdi mdi-check-all\"></i>\n                                            </h2>\n                                            <h3 className=\"mt-0\">Thank you !</h3>\n\n                                            <p className=\"w-75 mb-2 mx-auto\">\n                                                Quisque nec turpis at urna dictum luctus. Suspendisse convallis\n                                                dignissim eros at volutpat. In egestas mattis dui. Aliquam mattis dictum\n                                                aliquet.\n                                            </p>\n\n                                            <div className=\"mb-3\">\n                                                <Form.Check type=\"checkbox\" className=\"d-inline-block\">\n                                                    <Form.Check.Input type=\"checkbox\" />{' '}\n                                                    <Form.Check.Label>\n                                                        I agree with the Terms and Conditions\n                                                    </Form.Check.Label>\n                                                </Form.Check>\n                                            </div>\n                                        </div>\n                                    </Col>\n\n                                    <Col sm={12}>\n                                        <ul className=\"list-inline wizard mb-0\">\n                                            <li className=\"previous list-inline-item\">\n                                                <Button onClick={previous} variant=\"info\">\n                                                    Previous\n                                                </Button>\n                                            </li>\n\n                                            <li className=\"next list-inline-item float-end\">\n                                                <Button variant=\"success\">Submit</Button>\n                                            </li>\n                                        </ul>\n                                    </Col>\n                                </Row>\n                            )}\n                        />\n                    </Steps>\n                </Wizard>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst WizardWithProgressbar = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title mb-3\">Wizard with Progress bar</h4>\n\n                <Wizard\n                    render={({ step, steps }) => (\n                        <>\n                            <ProgressBar\n                                animated\n                                striped\n                                variant=\"success\"\n                                now={((steps.indexOf(step) + 1) / steps.length) * 100}\n                                className=\"mb-3 progress-sm\"\n                            />\n\n                            <Steps>\n                                <Step\n                                    id=\"login\"\n                                    render={({ next }) => (\n                                        <Form>\n                                            <Form.Group as={Row} className=\"mb-3\">\n                                                <Form.Label htmlFor=\"exampleEmail\" column md={3}>\n                                                    Email\n                                                </Form.Label>\n                                                <Col md={9}>\n                                                    <Form.Control\n                                                        type=\"email\"\n                                                        name=\"exampleEmail\"\n                                                        id=\"exampleEmail2\"\n                                                        placeholder=\"Enter email\"\n                                                    />\n                                                </Col>\n                                            </Form.Group>\n\n                                            <Form.Group as={Row} className=\"mb-3\">\n                                                <Form.Label htmlFor=\"examplePassword\" column md={3}>\n                                                    Password\n                                                </Form.Label>\n                                                <Col md={9}>\n                                                    <Form.Control\n                                                        type=\"password\"\n                                                        name=\"password\"\n                                                        id=\"examplePassword2\"\n                                                        placeholder=\"password placeholder\"\n                                                        defaultValue=\"12345\"\n                                                    />\n                                                </Col>\n                                            </Form.Group>\n\n                                            <Form.Group as={Row} className=\"mb-3\">\n                                                <Form.Label htmlFor=\"examplerePassword\" column md={3}>\n                                                    Re-Password\n                                                </Form.Label>\n                                                <Col md={9}>\n                                                    <Form.Control\n                                                        type=\"password\"\n                                                        name=\"repassword\"\n                                                        id=\"examplerePassword2\"\n                                                        placeholder=\"password\"\n                                                        defaultValue=\"12345\"\n                                                    />\n                                                </Col>\n                                            </Form.Group>\n\n                                            <ul className=\"list-inline wizard mb-0\">\n                                                <li className=\"next list-inline-item float-end\">\n                                                    <Button onClick={next} variant=\"success\">\n                                                        Next\n                                                    </Button>\n                                                </li>\n                                            </ul>\n                                        </Form>\n                                    )}\n                                />\n                                <Step\n                                    id=\"gandalf\"\n                                    render={({ next, previous }) => (\n                                        <Form>\n                                            <Form.Group as={Row} className=\"mb-3\">\n                                                <Form.Label htmlFor=\"fname\" column md={3}>\n                                                    First Name\n                                                </Form.Label>\n                                                <Col md={9}>\n                                                    <Form.Control\n                                                        type=\"text\"\n                                                        name=\"fname\"\n                                                        id=\"fname\"\n                                                        placeholder=\"Enter first name\"\n                                                    />\n                                                </Col>\n                                            </Form.Group>\n\n                                            <Form.Group as={Row} className=\"mb-3\">\n                                                <Form.Label htmlFor=\"lname\" column md={3}>\n                                                    Last Name\n                                                </Form.Label>\n                                                <Col md={9}>\n                                                    <Form.Control\n                                                        type=\"text\"\n                                                        name=\"lname\"\n                                                        id=\"lname\"\n                                                        placeholder=\"enter last name\"\n                                                    />\n                                                </Col>\n                                            </Form.Group>\n\n                                            <Form.Group as={Row} className=\"mb-3\">\n                                                <Form.Label htmlFor=\"phone\" column md={3}>\n                                                    Phone Number\n                                                </Form.Label>\n                                                <Col md={9}>\n                                                    <Form.Control\n                                                        type=\"text\"\n                                                        name=\"phone\"\n                                                        id=\"phone\"\n                                                        placeholder=\"enter phone number\"\n                                                    />\n                                                </Col>\n                                            </Form.Group>\n\n                                            <ul className=\"list-inline wizard mb-0\">\n                                                <li className=\"previous list-inline-item\">\n                                                    <Button onClick={previous} variant=\"info\">\n                                                        Previous\n                                                    </Button>\n                                                </li>\n                                                <li className=\"next list-inline-item float-end\">\n                                                    <Button onClick={next} variant=\"success\">\n                                                        Next\n                                                    </Button>\n                                                </li>\n                                            </ul>\n                                        </Form>\n                                    )}\n                                />\n                                <Step\n                                    id=\"dumbledore\"\n                                    render={({ previous }) => (\n                                        <Row>\n                                            <Col sm={12}>\n                                                <div className=\"text-center\">\n                                                    <h2 className=\"mt-0\">\n                                                        <i className=\"mdi mdi-check-all\"></i>\n                                                    </h2>\n                                                    <h3 className=\"mt-0\">Thank you !</h3>\n\n                                                    <p className=\"w-75 mb-2 mx-auto\">\n                                                        Quisque nec turpis at urna dictum luctus. Suspendisse convallis\n                                                        dignissim eros at volutpat. In egestas mattis dui. Aliquam\n                                                        mattis dictum aliquet.\n                                                    </p>\n\n                                                    <div className=\"mb-3\">\n                                                        <Form.Check type=\"checkbox\" className=\"d-inline-block\">\n                                                            <Form.Check.Input type=\"checkbox\" />{' '}\n                                                            <Form.Check.Label>\n                                                                I agree with the Terms and Conditions\n                                                            </Form.Check.Label>\n                                                        </Form.Check>\n                                                    </div>\n                                                </div>\n                                            </Col>\n\n                                            <Col sm={12}>\n                                                <ul className=\"list-inline wizard mb-0\">\n                                                    <li className=\"previous list-inline-item\">\n                                                        <Button onClick={previous} variant=\"info\">\n                                                            Previous\n                                                        </Button>\n                                                    </li>\n\n                                                    <li className=\"next list-inline-item float-end\">\n                                                        <Button variant=\"success\">Submit</Button>\n                                                    </li>\n                                                </ul>\n                                            </Col>\n                                        </Row>\n                                    )}\n                                />\n                            </Steps>\n                        </>\n                    )}\n                />\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst WizardWithFormValidation = () => {\n    /*\n     * form validation schema\n     */\n    const validationSchema = yupResolver(\n        yup.object().shape({\n            email: yup.string().required('Please enter Email address'),\n            password: yup.string().required('Please enter Password'),\n            checkbox: yup.bool().oneOf([true]),\n        })\n    );\n    const validationSchema2 = yupResolver(\n        yup.object().shape({\n            firstname: yup.string().required('Please enter First Name'),\n            lastname: yup.string().required('Please enter Last Name'),\n            checkbox: yup.bool().oneOf([true]),\n        })\n    );\n\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title mb-3\">Wizard with Validation</h4>\n\n                <Wizard\n                    render={({ step, steps }) => (\n                        <>\n                            <ProgressBar\n                                animated\n                                striped\n                                variant=\"success\"\n                                now={((steps.indexOf(step) + 1) / steps.length) * 100}\n                                className=\"mb-3 progress-sm\"\n                            />\n\n                            <Steps>\n                                <Step\n                                    id=\"login\"\n                                    render={({ next }) => (\n                                        <VerticalForm onSubmit={(event, values) => next()} resolver={validationSchema}>\n                                            <FormInput\n                                                label=\"Username/Email\"\n                                                type=\"email\"\n                                                name=\"email\"\n                                                containerClass={'mb-3'}\n                                            />\n                                            <FormInput\n                                                label=\"Password\"\n                                                type=\"password\"\n                                                name=\"password\"\n                                                containerClass={'mb-3'}\n                                            />\n\n                                            <FormInput label=\"Remember me\" type=\"checkbox\" name=\"checkbox\" />\n\n                                            <ul className=\"list-inline wizard mb-0\">\n                                                <li className=\"next list-inline-item float-end\">\n                                                    <Button variant=\"success\" type=\"submit\">\n                                                        Next\n                                                    </Button>\n                                                </li>\n                                            </ul>\n                                        </VerticalForm>\n                                    )}\n                                />\n                                <Step\n                                    id=\"gandalf\"\n                                    render={({ next, previous }) => (\n                                        <VerticalForm onSubmit={(event, values) => next()} resolver={validationSchema2}>\n                                            <FormInput\n                                                label=\"First Name\"\n                                                type=\"text\"\n                                                name=\"firstname\"\n                                                containerClass={'mb-3'}\n                                            />\n                                            <FormInput\n                                                label=\"Last Name\"\n                                                type=\"text\"\n                                                name=\"lastname\"\n                                                containerClass={'mb-3'}\n                                            />\n\n                                            <FormInput\n                                                label=\"Agree to terms and conditions\"\n                                                type=\"checkbox\"\n                                                name=\"checkbox\"\n                                                containerClass={'mb-3'}\n                                            />\n\n                                            <ul className=\"list-inline wizard mb-0\">\n                                                <li className=\"previous list-inline-item\">\n                                                    <Button onClick={previous} variant=\"info\">\n                                                        Previous\n                                                    </Button>\n                                                </li>\n                                                <li className=\"next list-inline-item float-end\">\n                                                    <Button variant=\"success\" type=\"submit\">\n                                                        Next\n                                                    </Button>\n                                                </li>\n                                            </ul>\n                                        </VerticalForm>\n                                    )}\n                                />\n                                <Step\n                                    id=\"dumbledore\"\n                                    render={({ previous }) => (\n                                        <Row>\n                                            <Col sm={12}>\n                                                <div className=\"text-center\">\n                                                    <h2 className=\"mt-0\">\n                                                        <i className=\"mdi mdi-check-all\"></i>\n                                                    </h2>\n                                                    <h3 className=\"mt-0\">Thank you !</h3>\n\n                                                    <p className=\"w-75 mb-2 mx-auto\">\n                                                        Quisque nec turpis at urna dictum luctus. Suspendisse convallis\n                                                        dignissim eros at volutpat. In egestas mattis dui. Aliquam\n                                                        mattis dictum aliquet.\n                                                    </p>\n\n                                                    <div className=\"mb-3\">\n                                                        <Form.Check type=\"checkbox\" className=\"d-inline-block\">\n                                                            <Form.Check.Input type=\"checkbox\" />{' '}\n                                                            <Form.Check.Label>\n                                                                I agree with the Terms and Conditions\n                                                            </Form.Check.Label>\n                                                        </Form.Check>\n                                                    </div>\n                                                </div>\n                                            </Col>\n\n                                            <Col sm={12}>\n                                                <ul className=\"list-inline wizard mb-0\">\n                                                    <li className=\"previous list-inline-item\">\n                                                        <Button onClick={previous} variant=\"info\">\n                                                            Previous\n                                                        </Button>\n                                                    </li>\n\n                                                    <li className=\"next list-inline-item float-end\">\n                                                        <Button variant=\"success\">Submit</Button>\n                                                    </li>\n                                                </ul>\n                                            </Col>\n                                        </Row>\n                                    )}\n                                />\n                            </Steps>\n                        </>\n                    )}\n                />\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst FormWizard = (): React$Element<React$FragmentType> => {\n    return (\n        <>\n            <PageTitle\n                breadCrumbItems={[\n                    { label: 'Forms', path: '/ui/forms/wizard' },\n                    { label: 'Form Wizard', path: '/ui/forms/wizard', active: true },\n                ]}\n                title={'Form Wizard'}\n            />\n\n            <Row>\n                <Col xl={6}>\n                    <BasicWizard />\n                </Col>\n\n                <Col xl={6}>\n                    <WizardWithProgressbar />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col lg={6}>\n                    <WizardWithFormValidation />\n                </Col>\n            </Row>\n        </>\n    );\n};\n\nexport default FormWizard;\n","// @flow\nimport React from 'react';\nimport { Row, Col, Breadcrumb } from 'react-bootstrap';\n\ntype BreadcrumbItems = {\n    label: string,\n    path: string,\n    active?: boolean,\n};\n\ntype PageTitleProps = {\n    breadCrumbItems: Array<BreadcrumbItems>,\n    title: string,\n};\n\n/**\n * PageTitle\n */\nconst PageTitle = (props: PageTitleProps): React$Element<any> => {\n    return (\n        <Row>\n            <Col>\n                <div className=\"page-title-box\">\n                    <div className=\"page-title-right\">\n                        <Breadcrumb listProps={{ className: 'm-0' }}>\n                            <Breadcrumb.Item href=\"/\">Home</Breadcrumb.Item>\n\n                            {props.breadCrumbItems.map((item, index) => {\n                                return item.active ? (\n                                    <Breadcrumb.Item active key={index}>\n                                        {item.label}\n                                    </Breadcrumb.Item>\n                                ) : (\n                                    <Breadcrumb.Item key={index} href={item.path}>\n                                        {item.label}\n                                    </Breadcrumb.Item>\n                                );\n                            })}\n                        </Breadcrumb>\n                    </div>\n                    <h4 className=\"page-title\">{props.title}</h4>\n                </div>\n            </Col>\n        </Row>\n    );\n};\n\nexport default PageTitle;\n","// @flow\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\n\ntype VerticalFromProps = {\n    defaultValues?: Object,\n    resolver?: any,\n    children?: any,\n    onSubmit?: (value: any) => void,\n    formClass?: string,\n};\n\nconst VerticalForm = ({\n    defaultValues,\n    resolver,\n    children,\n    onSubmit,\n    formClass,\n}: VerticalFromProps): React$Element<any> => {\n    /*\n     * form methods\n     */\n    const methods = useForm({ defaultValues, resolver });\n    const {\n        handleSubmit,\n        register,\n        control,\n        formState: { errors },\n    } = methods;\n\n    return (\n        <form onSubmit={handleSubmit(onSubmit)} className={formClass} noValidate>\n            {Array.isArray(children)\n                ? children.map((child) => {\n                      return child.props && child.props.name\n                          ? React.createElement(child.type, {\n                                ...{\n                                    ...child.props,\n                                    register,\n                                    key: child.props.name,\n                                    errors,\n                                    control,\n                                },\n                            })\n                          : child;\n                  })\n                : children}\n        </form>\n    );\n};\n\nexport default VerticalForm;\n","// @flow\nimport React, { useState } from 'react';\nimport { Form, InputGroup } from 'react-bootstrap';\nimport classNames from 'classnames';\n\n/* Password Input */\nconst PasswordInput = ({ name, placeholder, refCallback, errors, register, className }) => {\n    const [showPassword, setShowPassword] = useState(false);\n\n    return (\n        <>\n            <InputGroup className=\"mb-0\">\n                <Form.Control\n                    type={showPassword ? 'text' : 'password'}\n                    placeholder={placeholder}\n                    name={name}\n                    id={name}\n                    as=\"input\"\n                    ref={(r) => {\n                        if (refCallback) refCallback(r);\n                    }}\n                    className={className}\n                    isInvalid={errors && errors[name] ? true : false}\n                    {...(register ? register(name) : {})}\n                    autoComplete={name}\n                />\n                <div\n                    className={classNames('input-group-text', 'input-group-password', {\n                        'show-password': showPassword,\n                    })}\n                    data-password={showPassword ? 'true' : 'false'}>\n                    <span\n                        className=\"password-eye\"\n                        onClick={() => {\n                            setShowPassword(!showPassword);\n                        }}></span>\n                </div>\n            </InputGroup>\n        </>\n    );\n};\n\ntype FormInputProps = {\n    label?: string,\n    type?: string,\n    name?: string,\n    placeholder?: string,\n    register?: any,\n    errors?: any,\n    className?: string,\n    labelClassName?: string,\n    containerClass?: string,\n    refCallback?: any,\n    children?: any,\n};\n\nconst FormInput = ({\n    label,\n    type,\n    name,\n    placeholder,\n    register,\n    errors,\n    className,\n    labelClassName,\n    containerClass,\n    refCallback,\n    children,\n    ...otherProps\n}: FormInputProps): React$Element<React$FragmentType> => {\n    // handle input type\n    const comp = type === 'textarea' ? 'textarea' : type === 'select' ? 'select' : 'input';\n\n    return (\n        <>\n            {type === 'hidden' ? (\n                <input type={type} name={name} {...(register ? register(name) : {})} {...otherProps} />\n            ) : (\n                <>\n                    {type === 'password' ? (\n                        <>\n                            <Form.Group className={containerClass}>\n                                {label ? (\n                                    <>\n                                        {' '}\n                                        <Form.Label className={labelClassName}>{label}</Form.Label> {children}{' '}\n                                    </>\n                                ) : null}\n                                <PasswordInput\n                                    name={name}\n                                    placeholder={placeholder}\n                                    refCallback={refCallback}\n                                    errors={errors}\n                                    register={register}\n                                    className={className}\n                                />\n\n                                {errors && errors[name] ? (\n                                    <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                                        {errors[name]['message']}\n                                    </Form.Control.Feedback>\n                                ) : null}\n                            </Form.Group>\n                        </>\n                    ) : (\n                        <>\n                            {type === 'select' ? (\n                                <>\n                                    <Form.Group className={containerClass}>\n                                        {label ? <Form.Label className={labelClassName}>{label}</Form.Label> : null}\n\n                                        <Form.Select\n                                            type={type}\n                                            label={label}\n                                            name={name}\n                                            id={name}\n                                            ref={(r) => {\n                                                if (refCallback) refCallback(r);\n                                            }}\n                                            comp={comp}\n                                            className={className}\n                                            isInvalid={errors && errors[name] ? true : false}\n                                            {...(register ? register(name) : {})}\n                                            {...otherProps}>\n                                            {children}\n                                        </Form.Select>\n\n                                        {errors && errors[name] ? (\n                                            <Form.Control.Feedback type=\"invalid\">\n                                                {errors[name]['message']}\n                                            </Form.Control.Feedback>\n                                        ) : null}\n                                    </Form.Group>\n                                </>\n                            ) : (\n                                <>\n                                    {type === 'checkbox' || type === 'radio' ? (\n                                        <>\n                                            <Form.Group className={containerClass}>\n                                                <Form.Check\n                                                    type={type}\n                                                    label={label}\n                                                    name={name}\n                                                    id={name}\n                                                    ref={(r) => {\n                                                        if (refCallback) refCallback(r);\n                                                    }}\n                                                    className={className}\n                                                    isInvalid={errors && errors[name] ? true : false}\n                                                    {...(register ? register(name) : {})}\n                                                    {...otherProps}\n                                                />\n\n                                                {errors && errors[name] ? (\n                                                    <Form.Control.Feedback type=\"invalid\">\n                                                        {errors[name]['message']}\n                                                    </Form.Control.Feedback>\n                                                ) : null}\n                                            </Form.Group>\n                                        </>\n                                    ) : (\n                                        <Form.Group className={containerClass}>\n                                            {label ? <Form.Label className={labelClassName}>{label}</Form.Label> : null}\n\n                                            <Form.Control\n                                                type={type}\n                                                placeholder={placeholder}\n                                                name={name}\n                                                id={name}\n                                                as={comp}\n                                                ref={(r) => {\n                                                    if (refCallback) refCallback(r);\n                                                }}\n                                                className={className}\n                                                isInvalid={errors && errors[name] ? true : false}\n                                                {...(register ? register(name) : {})}\n                                                {...otherProps}\n                                                autoComplete={name}>\n                                                {children ? children : null}\n                                            </Form.Control>\n\n                                            {errors && errors[name] ? (\n                                                <Form.Control.Feedback type=\"invalid\">\n                                                    {errors[name]['message']}\n                                                </Form.Control.Feedback>\n                                            ) : null}\n                                        </Form.Group>\n                                    )}\n                                </>\n                            )}\n                        </>\n                    )}\n                </>\n            )}\n        </>\n    );\n};\n\nexport default FormInput;\n"],"sourceRoot":""}