{"version":3,"sources":["pages/uikit/Progress.js","components/PageTitle.js"],"names":["Basic","Body","className","now","WithLabels","label","ScreenreaderOnlyLabel","visuallyHidden","ContextualAlternatives","variant","Height","style","height","Striped","striped","Animated","animated","Stacked","ProgressBarExamples","breadCrumbItems","path","active","title","xl","PageTitle","props","listProps","Item","href","map","item","index"],"mappings":"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","file":"static/js/142.5eab033b.chunk.js","sourcesContent":["// @flow\nimport React from 'react';\nimport { Row, Col, Card, ProgressBar } from 'react-bootstrap';\n\n// components\nimport PageTitle from '../../components/PageTitle';\n\nconst Basic = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Examples</h4>\n                <p className=\"text-muted font-14\">\n                    A progressBar bar can be used to show a user how far along he/she is in a process.\n                </p>\n\n                <ProgressBar />\n                <ProgressBar now=\"25\" className=\"mt-2\" />\n                <ProgressBar now={50} className=\"mt-2\" />\n                <ProgressBar now={75} className=\"mt-2\" />\n                <ProgressBar now=\"100\" className=\"mt-2\" />\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst WithLabels = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Labels</h4>\n                <p className=\"text-muted font-14\">\n                    Add a <code>label</code> prop to show a visible percentage. For low percentages, consider adding a\n                    min-width to ensure the label's text is fully visible.\n                </p>\n\n                <ProgressBar now={25} label={`25%`} />\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst ScreenreaderOnlyLabel = () => {\n    const now = 60;\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Screenreader only label</h4>\n                <p className=\"text-muted font-14\">\n                    Add a <code>visuallyHidden</code> prop to hide the label visually.\n                </p>\n\n                <ProgressBar now={now} label={`${now}%`} visuallyHidden />\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst ContextualAlternatives = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Contextual alternatives</h4>\n                <p className=\"text-muted font-14\">\n                    Progress bars use some of the same button and alert classes for consistent styles.\n                </p>\n\n                <ProgressBar now={25} className=\"mt-2\" variant=\"success\" />\n                <ProgressBar now={50} className=\"mt-2\" variant=\"info\" />\n                <ProgressBar now={75} className=\"mt-2\" variant=\"warning\" />\n                <ProgressBar now={100} className=\"mt-2\" variant=\"danger\" />\n                <ProgressBar now={65} className=\"mt-2\" variant=\"dark\" />\n                <ProgressBar now={50} className=\"mt-2\" variant=\"secondary\" />\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst Height = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Height</h4>\n                <p className=\"text-muted font-14\">\n                    We only set a <code>height</code> value on the <code>ProgressBar</code>, so if you change that value\n                    the inner <code>.progress-bar</code> will automatically resize accordingly. Use{' '}\n                    <code>.progress-sm</code>,<code>.progress-md</code>,<code>.progress-lg</code>,\n                    <code>.progress-xl</code> classes.\n                </p>\n\n                <ProgressBar now=\"25\" variant=\"danger\" style={{ height: 1 }} />\n                <ProgressBar now=\"25\" className=\"mt-2\" style={{ height: 3 }} />\n                <ProgressBar now={25} className=\"mt-2 progress-sm\" variant=\"success\" />\n                <ProgressBar now={50} className=\"mt-2 progress-md\" variant=\"info\" />\n                <ProgressBar now=\"75\" className=\"mt-2 progress-lg\" variant=\"warning\" />\n                <ProgressBar now=\"38\" className=\"mt-2 progress-xl\" variant=\"success\" />\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst Striped = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Striped</h4>\n                <p className=\"text-muted font-14\">\n                    Add <code>striped</code> to any <code>ProgressBar</code> to apply a stripe via CSS gradient over the\n                    progressBar barâ€™s background color.\n                </p>\n\n                <ProgressBar now={10} striped />\n                <ProgressBar now=\"25\" className=\"mt-2\" variant=\"success\" striped />\n                <ProgressBar now={50} className=\"mt-2\" variant=\"info\" striped />\n                <ProgressBar now={75} className=\"mt-2\" variant=\"warning\" striped />\n                <ProgressBar now=\"100\" className=\"mt-2\" variant=\"danger\" striped />\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst Animated = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Animated stripes</h4>\n                <p className=\"text-muted font-14\">\n                    The striped gradient can also be animated. Add <code>animated</code> to <code>ProgressBar</code> to\n                    animate the stripes right to left via CSS3 animations.\n                </p>\n\n                <ProgressBar now={45} variant=\"primary\" animated></ProgressBar>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst Stacked = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Stacked</h4>\n                <p className=\"text-muted font-14\">\n                    Nest <code>&lt;ProgressBar /&gt;</code>s to stack them.\n                </p>\n                <ProgressBar>\n                    <ProgressBar striped variant=\"success\" now={35} key={1} />\n                    <ProgressBar variant=\"warning\" now={20} key={2} />\n                    <ProgressBar striped variant=\"danger\" now={10} key={3} />\n                </ProgressBar>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst ProgressBarExamples = (): React$Element<React$FragmentType> => {\n    return (\n        <>\n            <PageTitle\n                breadCrumbItems={[\n                    { label: 'Base UI', path: '/ui/progressBar' },\n                    { label: 'ProgressBar', path: '/ui/progressBar', active: true },\n                ]}\n                title={'ProgressBar'}\n            />\n\n            <Row>\n                <Col xl={6}>\n                    <Basic />\n                    <ScreenreaderOnlyLabel />\n                    <Height />\n                    <Animated />\n                </Col>\n                <Col xl={6}>\n                    <WithLabels />\n                    <ContextualAlternatives />\n                    <Striped />\n                    <Stacked />\n                </Col>\n            </Row>\n        </>\n    );\n};\n\nexport default ProgressBarExamples;\n","// @flow\nimport React from 'react';\nimport { Row, Col, Breadcrumb } from 'react-bootstrap';\n\ntype BreadcrumbItems = {\n    label: string,\n    path: string,\n    active?: boolean,\n};\n\ntype PageTitleProps = {\n    breadCrumbItems: Array<BreadcrumbItems>,\n    title: string,\n};\n\n/**\n * PageTitle\n */\nconst PageTitle = (props: PageTitleProps): React$Element<any> => {\n    return (\n        <Row>\n            <Col>\n                <div className=\"page-title-box\">\n                    <div className=\"page-title-right\">\n                        <Breadcrumb listProps={{ className: 'm-0' }}>\n                            <Breadcrumb.Item href=\"/\">Home</Breadcrumb.Item>\n\n                            {props.breadCrumbItems.map((item, index) => {\n                                return item.active ? (\n                                    <Breadcrumb.Item active key={index}>\n                                        {item.label}\n                                    </Breadcrumb.Item>\n                                ) : (\n                                    <Breadcrumb.Item key={index} href={item.path}>\n                                        {item.label}\n                                    </Breadcrumb.Item>\n                                );\n                            })}\n                        </Breadcrumb>\n                    </div>\n                    <h4 className=\"page-title\">{props.title}</h4>\n                </div>\n            </Col>\n        </Row>\n    );\n};\n\nexport default PageTitle;\n"],"sourceRoot":""}